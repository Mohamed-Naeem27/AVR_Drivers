
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003374  00003408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00003410  2**0
                  ALLOC
  3 .stab         00002d6c  00000000  00000000  00003410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed5  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007051  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b79f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e7       	ldi	r30, 0x74	; 116
      78:	f3 e3       	ldi	r31, 0x33	; 51
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 58 19 	call	0x32b0	; 0x32b0 <main>
      8a:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_SetPortDirection>:
#include "../../LIB/STD_types.h"
#include "DIO_types.h"


void DIO_SetPortDirection(DIO_PORT_ID port_ID , DIO_Direction direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_SetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_SetPortDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_SetPortDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
    if (OUTPUT == direction)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	99 f5       	brne	.+102    	; 0xbc4 <DIO_SetPortDirection+0x7e>
    {
    	switch(port_ID)
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	3e 83       	std	Y+6, r19	; 0x06
     b66:	2d 83       	std	Y+5, r18	; 0x05
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	9e 81       	ldd	r25, Y+6	; 0x06
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 05       	cpc	r25, r1
     b70:	d1 f0       	breq	.+52     	; 0xba6 <DIO_SetPortDirection+0x60>
     b72:	2d 81       	ldd	r18, Y+5	; 0x05
     b74:	3e 81       	ldd	r19, Y+6	; 0x06
     b76:	22 30       	cpi	r18, 0x02	; 2
     b78:	31 05       	cpc	r19, r1
     b7a:	2c f4       	brge	.+10     	; 0xb86 <DIO_SetPortDirection+0x40>
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	61 f0       	breq	.+24     	; 0xb9c <DIO_SetPortDirection+0x56>
     b84:	54 c0       	rjmp	.+168    	; 0xc2e <DIO_SetPortDirection+0xe8>
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	81 f0       	breq	.+32     	; 0xbb0 <DIO_SetPortDirection+0x6a>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	81 f0       	breq	.+32     	; 0xbba <DIO_SetPortDirection+0x74>
     b9a:	49 c0       	rjmp	.+146    	; 0xc2e <DIO_SetPortDirection+0xe8>
    	{
    	case PORTA: DDRA_Reg = 0xFF ; break;
     b9c:	ea e3       	ldi	r30, 0x3A	; 58
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8f ef       	ldi	r24, 0xFF	; 255
     ba2:	80 83       	st	Z, r24
     ba4:	44 c0       	rjmp	.+136    	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTB: DDRB_Reg = 0xFF ; break;
     ba6:	e7 e3       	ldi	r30, 0x37	; 55
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	80 83       	st	Z, r24
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTC: DDRC_Reg = 0xFF ; break;
     bb0:	e4 e3       	ldi	r30, 0x34	; 52
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	80 83       	st	Z, r24
     bb8:	3a c0       	rjmp	.+116    	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTD: DDRD_Reg = 0xFF ; break;
     bba:	e1 e3       	ldi	r30, 0x31	; 49
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	80 83       	st	Z, r24
     bc2:	35 c0       	rjmp	.+106    	; 0xc2e <DIO_SetPortDirection+0xe8>
    	}
    }


    else if (INPUT == direction)
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	88 23       	and	r24, r24
     bc8:	91 f5       	brne	.+100    	; 0xc2e <DIO_SetPortDirection+0xe8>
    {
    	switch(port_ID)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	3c 83       	std	Y+4, r19	; 0x04
     bd2:	2b 83       	std	Y+3, r18	; 0x03
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	91 05       	cpc	r25, r1
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <DIO_SetPortDirection+0xcc>
     bde:	2b 81       	ldd	r18, Y+3	; 0x03
     be0:	3c 81       	ldd	r19, Y+4	; 0x04
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	2c f4       	brge	.+10     	; 0xbf2 <DIO_SetPortDirection+0xac>
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	61 f0       	breq	.+24     	; 0xc08 <DIO_SetPortDirection+0xc2>
     bf0:	1e c0       	rjmp	.+60     	; 0xc2e <DIO_SetPortDirection+0xe8>
     bf2:	2b 81       	ldd	r18, Y+3	; 0x03
     bf4:	3c 81       	ldd	r19, Y+4	; 0x04
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	81 f0       	breq	.+32     	; 0xc1c <DIO_SetPortDirection+0xd6>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	91 05       	cpc	r25, r1
     c04:	81 f0       	breq	.+32     	; 0xc26 <DIO_SetPortDirection+0xe0>
     c06:	13 c0       	rjmp	.+38     	; 0xc2e <DIO_SetPortDirection+0xe8>
    	{
     	case PORTA: DDRA_Reg = 0xFF ; break;
     c08:	ea e3       	ldi	r30, 0x3A	; 58
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	80 83       	st	Z, r24
     c10:	0e c0       	rjmp	.+28     	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTB: DDRB_Reg = 0xFF ; break;
     c12:	e7 e3       	ldi	r30, 0x37	; 55
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	80 83       	st	Z, r24
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTC: DDRC_Reg = 0xFF ; break;
     c1c:	e4 e3       	ldi	r30, 0x34	; 52
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	80 83       	st	Z, r24
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <DIO_SetPortDirection+0xe8>
    	case PORTD: DDRD_Reg = 0xFF ; break;
     c26:	e1 e3       	ldi	r30, 0x31	; 49
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	80 83       	st	Z, r24
    	}
    }
}
     c2e:	26 96       	adiw	r28, 0x06	; 6
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <DIO_SetPortValue>:

void DIO_SetPortValue(DIO_PORT_ID port_ID , u8 value )
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <DIO_SetPortValue+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <DIO_SetPortValue+0x8>
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6a 83       	std	Y+2, r22	; 0x02
   	switch (port_ID)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3c 83       	std	Y+4, r19	; 0x04
     c58:	2b 83       	std	Y+3, r18	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	d1 f0       	breq	.+52     	; 0xc98 <DIO_SetPortValue+0x58>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_SetPortValue+0x38>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	61 f0       	breq	.+24     	; 0xc8e <DIO_SetPortValue+0x4e>
     c76:	1e c0       	rjmp	.+60     	; 0xcb4 <DIO_SetPortValue+0x74>
     c78:	2b 81       	ldd	r18, Y+3	; 0x03
     c7a:	3c 81       	ldd	r19, Y+4	; 0x04
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	81 f0       	breq	.+32     	; 0xca2 <DIO_SetPortValue+0x62>
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	81 f0       	breq	.+32     	; 0xcac <DIO_SetPortValue+0x6c>
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <DIO_SetPortValue+0x74>
   	{
   	   case PORTA: PORTA_Reg = value ;break;
     c8e:	eb e3       	ldi	r30, 0x3B	; 59
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	80 83       	st	Z, r24
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <DIO_SetPortValue+0x74>
   	   case PORTB: PORTB_Reg = value ;break;
     c98:	e8 e3       	ldi	r30, 0x38	; 56
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	80 83       	st	Z, r24
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <DIO_SetPortValue+0x74>
   	   case PORTC: PORTC_Reg = value ;break;
     ca2:	e5 e3       	ldi	r30, 0x35	; 53
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	80 83       	st	Z, r24
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <DIO_SetPortValue+0x74>
   	   case PORTD: PORTD_Reg = value ;break;
     cac:	e2 e3       	ldi	r30, 0x32	; 50
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	80 83       	st	Z, r24
   	}
}
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <DIO_SetPinDirection>:

void DIO_SetPinDirection(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , DIO_Direction direction)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	27 97       	sbiw	r28, 0x07	; 7
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	6a 83       	std	Y+2, r22	; 0x02
     cda:	4b 83       	std	Y+3, r20	; 0x03
   if (port_ID <= PORTD && pin_ID <= pin7)
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	84 30       	cpi	r24, 0x04	; 4
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <DIO_SetPinDirection+0x22>
     ce2:	ee c0       	rjmp	.+476    	; 0xec0 <DIO_SetPinDirection+0x1fe>
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	88 30       	cpi	r24, 0x08	; 8
     ce8:	08 f0       	brcs	.+2      	; 0xcec <DIO_SetPinDirection+0x2a>
     cea:	ea c0       	rjmp	.+468    	; 0xec0 <DIO_SetPinDirection+0x1fe>
   {
	 if(OUTPUT == direction)
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <DIO_SetPinDirection+0x32>
     cf2:	6f c0       	rjmp	.+222    	; 0xdd2 <DIO_SetPinDirection+0x110>
	   {
		 switch(port_ID)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3f 83       	std	Y+7, r19	; 0x07
     cfc:	2e 83       	std	Y+6, r18	; 0x06
     cfe:	8e 81       	ldd	r24, Y+6	; 0x06
     d00:	9f 81       	ldd	r25, Y+7	; 0x07
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	91 05       	cpc	r25, r1
     d06:	49 f1       	breq	.+82     	; 0xd5a <DIO_SetPinDirection+0x98>
     d08:	2e 81       	ldd	r18, Y+6	; 0x06
     d0a:	3f 81       	ldd	r19, Y+7	; 0x07
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	31 05       	cpc	r19, r1
     d10:	2c f4       	brge	.+10     	; 0xd1c <DIO_SetPinDirection+0x5a>
     d12:	8e 81       	ldd	r24, Y+6	; 0x06
     d14:	9f 81       	ldd	r25, Y+7	; 0x07
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	61 f0       	breq	.+24     	; 0xd32 <DIO_SetPinDirection+0x70>
     d1a:	d2 c0       	rjmp	.+420    	; 0xec0 <DIO_SetPinDirection+0x1fe>
     d1c:	2e 81       	ldd	r18, Y+6	; 0x06
     d1e:	3f 81       	ldd	r19, Y+7	; 0x07
     d20:	22 30       	cpi	r18, 0x02	; 2
     d22:	31 05       	cpc	r19, r1
     d24:	71 f1       	breq	.+92     	; 0xd82 <DIO_SetPinDirection+0xc0>
     d26:	8e 81       	ldd	r24, Y+6	; 0x06
     d28:	9f 81       	ldd	r25, Y+7	; 0x07
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	91 05       	cpc	r25, r1
     d2e:	e9 f1       	breq	.+122    	; 0xdaa <DIO_SetPinDirection+0xe8>
     d30:	c7 c0       	rjmp	.+398    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 {
		 case PORTA: SET_BIt(DDRA_Reg , pin_ID) ;break;
     d32:	aa e3       	ldi	r26, 0x3A	; 58
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e3       	ldi	r30, 0x3A	; 58
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_SetPinDirection+0x8e>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_SetPinDirection+0x8a>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	b3 c0       	rjmp	.+358    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTB: SET_BIt(DDRB_Reg , pin_ID) ;break;
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_SetPinDirection+0xb6>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_SetPinDirection+0xb2>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	9f c0       	rjmp	.+318    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTC: SET_BIt(DDRC_Reg , pin_ID) ;break;
     d82:	a4 e3       	ldi	r26, 0x34	; 52
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e4 e3       	ldi	r30, 0x34	; 52
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_SetPinDirection+0xde>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_SetPinDirection+0xda>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	8b c0       	rjmp	.+278    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTD: SET_BIt(DDRD_Reg , pin_ID) ;break;
     daa:	a1 e3       	ldi	r26, 0x31	; 49
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e1 e3       	ldi	r30, 0x31	; 49
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_SetPinDirection+0x106>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_SetPinDirection+0x102>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	77 c0       	rjmp	.+238    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 }

	   }
	 else if (INPUT == direction)
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	88 23       	and	r24, r24
     dd6:	09 f0       	breq	.+2      	; 0xdda <DIO_SetPinDirection+0x118>
     dd8:	73 c0       	rjmp	.+230    	; 0xec0 <DIO_SetPinDirection+0x1fe>
	 {
		switch(port_ID)
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3d 83       	std	Y+5, r19	; 0x05
     de2:	2c 83       	std	Y+4, r18	; 0x04
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	91 05       	cpc	r25, r1
     dec:	59 f1       	breq	.+86     	; 0xe44 <DIO_SetPinDirection+0x182>
     dee:	2c 81       	ldd	r18, Y+4	; 0x04
     df0:	3d 81       	ldd	r19, Y+5	; 0x05
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	2c f4       	brge	.+10     	; 0xe02 <DIO_SetPinDirection+0x140>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	69 f0       	breq	.+26     	; 0xe1a <DIO_SetPinDirection+0x158>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <DIO_SetPinDirection+0x1fe>
     e02:	2c 81       	ldd	r18, Y+4	; 0x04
     e04:	3d 81       	ldd	r19, Y+5	; 0x05
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	89 f1       	breq	.+98     	; 0xe6e <DIO_SetPinDirection+0x1ac>
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_SetPinDirection+0x156>
     e16:	40 c0       	rjmp	.+128    	; 0xe98 <DIO_SetPinDirection+0x1d6>
     e18:	53 c0       	rjmp	.+166    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 {
		 case PORTA: CLEAR_BIt(DDRA_Reg , pin_ID) ;break;
     e1a:	aa e3       	ldi	r26, 0x3A	; 58
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ea e3       	ldi	r30, 0x3A	; 58
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_SetPinDirection+0x176>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_SetPinDirection+0x172>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	3e c0       	rjmp	.+124    	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTB: CLEAR_BIt(DDRB_Reg , pin_ID) ;break;
     e44:	a7 e3       	ldi	r26, 0x37	; 55
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e3       	ldi	r30, 0x37	; 55
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_SetPinDirection+0x1a0>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_SetPinDirection+0x19c>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	29 c0       	rjmp	.+82     	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTC: CLEAR_BIt(DDRC_Reg , pin_ID) ;break;
     e6e:	a4 e3       	ldi	r26, 0x34	; 52
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e4 e3       	ldi	r30, 0x34	; 52
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_SetPinDirection+0x1ca>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_SetPinDirection+0x1c6>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	14 c0       	rjmp	.+40     	; 0xec0 <DIO_SetPinDirection+0x1fe>
		 case PORTD: CLEAR_BIt(DDRD_Reg , pin_ID) ;break;
     e98:	a1 e3       	ldi	r26, 0x31	; 49
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e1 e3       	ldi	r30, 0x31	; 49
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_SetPinDirection+0x1f4>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_SetPinDirection+0x1f0>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
		 }

	 }
   }
}
     ec0:	27 96       	adiw	r28, 0x07	; 7
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <DIO_SetPinValue>:

void DIO_SetPinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID , STD_level_Type value )
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	27 97       	sbiw	r28, 0x07	; 7
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	6a 83       	std	Y+2, r22	; 0x02
     eea:	4b 83       	std	Y+3, r20	; 0x03
    if (port_ID <= PORTD && pin_ID <= pin7)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <DIO_SetPinValue+0x22>
     ef2:	ee c0       	rjmp	.+476    	; 0x10d0 <DIO_SetPinValue+0x1fe>
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	88 30       	cpi	r24, 0x08	; 8
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_SetPinValue+0x2a>
     efa:	ea c0       	rjmp	.+468    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    {
    	if (value == HIGH)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	09 f0       	breq	.+2      	; 0xf04 <DIO_SetPinValue+0x32>
     f02:	6f c0       	rjmp	.+222    	; 0xfe2 <DIO_SetPinValue+0x110>
    	{
    		switch (port_ID)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3f 83       	std	Y+7, r19	; 0x07
     f0c:	2e 83       	std	Y+6, r18	; 0x06
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	49 f1       	breq	.+82     	; 0xf6a <DIO_SetPinValue+0x98>
     f18:	2e 81       	ldd	r18, Y+6	; 0x06
     f1a:	3f 81       	ldd	r19, Y+7	; 0x07
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	2c f4       	brge	.+10     	; 0xf2c <DIO_SetPinValue+0x5a>
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	9f 81       	ldd	r25, Y+7	; 0x07
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	61 f0       	breq	.+24     	; 0xf42 <DIO_SetPinValue+0x70>
     f2a:	d2 c0       	rjmp	.+420    	; 0x10d0 <DIO_SetPinValue+0x1fe>
     f2c:	2e 81       	ldd	r18, Y+6	; 0x06
     f2e:	3f 81       	ldd	r19, Y+7	; 0x07
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	71 f1       	breq	.+92     	; 0xf92 <DIO_SetPinValue+0xc0>
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	9f 81       	ldd	r25, Y+7	; 0x07
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	e9 f1       	breq	.+122    	; 0xfba <DIO_SetPinValue+0xe8>
     f40:	c7 c0       	rjmp	.+398    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		{
    		case PORTA : SET_BIt(PORTA_Reg, pin_ID) ; break;
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_SetPinValue+0x8e>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_SetPinValue+0x8a>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	b3 c0       	rjmp	.+358    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTB : SET_BIt(PORTB_Reg, pin_ID) ; break;
     f6a:	a8 e3       	ldi	r26, 0x38	; 56
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e8 e3       	ldi	r30, 0x38	; 56
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_SetPinValue+0xb6>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_SetPinValue+0xb2>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	9f c0       	rjmp	.+318    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTC : SET_BIt(PORTC_Reg, pin_ID) ; break;
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_SetPinValue+0xde>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_SetPinValue+0xda>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	8b c0       	rjmp	.+278    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTD : SET_BIt(PORTD_Reg, pin_ID) ; break;
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_SetPinValue+0x106>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_SetPinValue+0x102>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	77 c0       	rjmp	.+238    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		}

    	}

    	else if (value == LOW)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 23       	and	r24, r24
     fe6:	09 f0       	breq	.+2      	; 0xfea <DIO_SetPinValue+0x118>
     fe8:	73 c0       	rjmp	.+230    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    	{
    	    switch (port_ID)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3d 83       	std	Y+5, r19	; 0x05
     ff2:	2c 83       	std	Y+4, r18	; 0x04
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	59 f1       	breq	.+86     	; 0x1054 <DIO_SetPinValue+0x182>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <DIO_SetPinValue+0x140>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f0       	breq	.+26     	; 0x102a <DIO_SetPinValue+0x158>
    1010:	5f c0       	rjmp	.+190    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	89 f1       	breq	.+98     	; 0x107e <DIO_SetPinValue+0x1ac>
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <DIO_SetPinValue+0x156>
    1026:	40 c0       	rjmp	.+128    	; 0x10a8 <DIO_SetPinValue+0x1d6>
    1028:	53 c0       	rjmp	.+166    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		{
    		case PORTA : CLEAR_BIt(PORTA_Reg, pin_ID) ; break;
    102a:	ab e3       	ldi	r26, 0x3B	; 59
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e3       	ldi	r30, 0x3B	; 59
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_SetPinValue+0x176>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_SetPinValue+0x172>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	3e c0       	rjmp	.+124    	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTB : CLEAR_BIt(PORTB_Reg, pin_ID) ; break;
    1054:	a8 e3       	ldi	r26, 0x38	; 56
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e8 e3       	ldi	r30, 0x38	; 56
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_SetPinValue+0x1a0>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_SetPinValue+0x19c>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	29 c0       	rjmp	.+82     	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTC : CLEAR_BIt(PORTC_Reg, pin_ID) ; break;
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_SetPinValue+0x1ca>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_SetPinValue+0x1c6>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <DIO_SetPinValue+0x1fe>
    		case PORTD : CLEAR_BIt(PORTD_Reg, pin_ID) ; break;
    10a8:	a2 e3       	ldi	r26, 0x32	; 50
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e2 e3       	ldi	r30, 0x32	; 50
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_SetPinValue+0x1f4>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_SetPinValue+0x1f0>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    		}

    	}
    }

}
    10d0:	27 96       	adiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <DIO_GetpinValue>:

STD_level_Type DIO_GetpinValue(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_GetpinValue+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DIO_GetpinValue+0x8>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
	STD_level_Type PinValue;
	if (port_ID <= PORTD && pin_ID <= pin7)
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	84 30       	cpi	r24, 0x04	; 4
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <DIO_GetpinValue+0x1a>
    10fa:	6b c0       	rjmp	.+214    	; 0x11d2 <DIO_GetpinValue+0xf0>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	08 f0       	brcs	.+2      	; 0x1104 <DIO_GetpinValue+0x22>
    1102:	67 c0       	rjmp	.+206    	; 0x11d2 <DIO_GetpinValue+0xf0>
	    {
		      switch (port_ID)
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3d 83       	std	Y+5, r19	; 0x05
    110c:	2c 83       	std	Y+4, r18	; 0x04
    110e:	4c 81       	ldd	r20, Y+4	; 0x04
    1110:	5d 81       	ldd	r21, Y+5	; 0x05
    1112:	41 30       	cpi	r20, 0x01	; 1
    1114:	51 05       	cpc	r21, r1
    1116:	41 f1       	breq	.+80     	; 0x1168 <DIO_GetpinValue+0x86>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	91 05       	cpc	r25, r1
    1120:	34 f4       	brge	.+12     	; 0x112e <DIO_GetpinValue+0x4c>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	21 15       	cp	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	61 f0       	breq	.+24     	; 0x1144 <DIO_GetpinValue+0x62>
    112c:	52 c0       	rjmp	.+164    	; 0x11d2 <DIO_GetpinValue+0xf0>
    112e:	4c 81       	ldd	r20, Y+4	; 0x04
    1130:	5d 81       	ldd	r21, Y+5	; 0x05
    1132:	42 30       	cpi	r20, 0x02	; 2
    1134:	51 05       	cpc	r21, r1
    1136:	51 f1       	breq	.+84     	; 0x118c <DIO_GetpinValue+0xaa>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	91 05       	cpc	r25, r1
    1140:	b9 f1       	breq	.+110    	; 0x11b0 <DIO_GetpinValue+0xce>
    1142:	47 c0       	rjmp	.+142    	; 0x11d2 <DIO_GetpinValue+0xf0>
		       {
		            case PORTA : PinValue = GET_BIt(PINA_Reg, pin_ID) ; break;
    1144:	e9 e3       	ldi	r30, 0x39	; 57
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_GetpinValue+0x7a>
    1158:	55 95       	asr	r21
    115a:	47 95       	ror	r20
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_GetpinValue+0x76>
    1160:	ca 01       	movw	r24, r20
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	35 c0       	rjmp	.+106    	; 0x11d2 <DIO_GetpinValue+0xf0>
		       		case PORTB : PinValue = GET_BIt(PINB_Reg, pin_ID) ; break;
    1168:	e6 e3       	ldi	r30, 0x36	; 54
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_GetpinValue+0x9e>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_GetpinValue+0x9a>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	23 c0       	rjmp	.+70     	; 0x11d2 <DIO_GetpinValue+0xf0>
		       		case PORTC : PinValue = GET_BIt(PINC_Reg, pin_ID) ; break;
    118c:	e3 e3       	ldi	r30, 0x33	; 51
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_GetpinValue+0xc2>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_GetpinValue+0xbe>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	11 c0       	rjmp	.+34     	; 0x11d2 <DIO_GetpinValue+0xf0>
		       		case PORTD : PinValue = GET_BIt(PIND_Reg, pin_ID) ; break;
    11b0:	e0 e3       	ldi	r30, 0x30	; 48
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_GetpinValue+0xe6>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_GetpinValue+0xe2>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	89 83       	std	Y+1, r24	; 0x01
		       }

	    }
return PinValue;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <Seven_Segment_Initialization>:
#include "../../MCAL/DIO/DIO_types.h"
#include "../../MCAL/DIO/DIO.h"


void Seven_Segment_Initialization()
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinDirection(PORTA , pin0 , OUTPUT); //A
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin1 , OUTPUT); //B
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin2 , OUTPUT); //C
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	62 e0       	ldi	r22, 0x02	; 2
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin3 , OUTPUT); //D
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	63 e0       	ldi	r22, 0x03	; 3
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

DIO_SetPinDirection(PORTB , pin2 , OUTPUT); //EN1
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	62 e0       	ldi	r22, 0x02	; 2
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTB , pin1 , OUTPUT); //EN2
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <Seven_Segment_Enable1>:

void Seven_Segment_Enable1()
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinValue(PORTB , pin2 , HIGH);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <Seven_Segment_Enable2>:

void Seven_Segment_Enable2()
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinValue(PORTB , pin1 , HIGH);
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <Seven_Segment_Disable1>:

void Seven_Segment_Disable1()
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinValue(PORTB , pin2 , LOW);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <Seven_Segment_Disable2>:

void Seven_Segment_Disable2()
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
DIO_SetPinValue(PORTB , pin1 , LOW);
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <Seven_Segment_Write_Number>:

void Seven_Segment_Write_Number(unsigned char number)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
  if(number < 10)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8a 30       	cpi	r24, 0x0A	; 10
    129e:	30 f5       	brcc	.+76     	; 0x12ec <Seven_Segment_Write_Number+0x5e>
     {
	   // 3   0b0000 0011
	   //            ABCD
	 DIO_SetPinValue(PORTA , pin0 ,  GET_BIt(number , 0)); //A
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	98 2f       	mov	r25, r24
    12a4:	91 70       	andi	r25, 0x01	; 1
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	49 2f       	mov	r20, r25
    12ac:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	 DIO_SetPinValue(PORTA , pin1 ,  GET_BIt(number , 1)); //B
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	86 95       	lsr	r24
    12b4:	98 2f       	mov	r25, r24
    12b6:	91 70       	andi	r25, 0x01	; 1
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	49 2f       	mov	r20, r25
    12be:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
     DIO_SetPinValue(PORTA , pin2 ,  GET_BIt(number , 2)); //C
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	86 95       	lsr	r24
    12c6:	86 95       	lsr	r24
    12c8:	98 2f       	mov	r25, r24
    12ca:	91 70       	andi	r25, 0x01	; 1
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	49 2f       	mov	r20, r25
    12d2:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
     DIO_SetPinValue(PORTA , pin3 ,  GET_BIt(number , 3)); //D
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	86 95       	lsr	r24
    12da:	86 95       	lsr	r24
    12dc:	86 95       	lsr	r24
    12de:	98 2f       	mov	r25, r24
    12e0:	91 70       	andi	r25, 0x01	; 1
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	63 e0       	ldi	r22, 0x03	; 3
    12e6:	49 2f       	mov	r20, r25
    12e8:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
     }
}
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <LCD_Initialize>:


static u8 InitStepFinished = 0;

void LCD_Initialize(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	e8 97       	sbiw	r28, 0x38	; 56
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
DIO_SetPortDirection(PORTA , OUTPUT);
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPortDirection>
DIO_SetPortDirection(PORTA , OUTPUT);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_SetPortDirection>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 ef       	ldi	r26, 0xF0	; 240
    131e:	b1 e4       	ldi	r27, 0x41	; 65
    1320:	8d ab       	std	Y+53, r24	; 0x35
    1322:	9e ab       	std	Y+54, r25	; 0x36
    1324:	af ab       	std	Y+55, r26	; 0x37
    1326:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	6d a9       	ldd	r22, Y+53	; 0x35
    132a:	7e a9       	ldd	r23, Y+54	; 0x36
    132c:	8f a9       	ldd	r24, Y+55	; 0x37
    132e:	98 ad       	ldd	r25, Y+56	; 0x38
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a ef       	ldi	r20, 0xFA	; 250
    1336:	54 e4       	ldi	r21, 0x44	; 68
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	89 ab       	std	Y+49, r24	; 0x31
    1342:	9a ab       	std	Y+50, r25	; 0x32
    1344:	ab ab       	std	Y+51, r26	; 0x33
    1346:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1348:	69 a9       	ldd	r22, Y+49	; 0x31
    134a:	7a a9       	ldd	r23, Y+50	; 0x32
    134c:	8b a9       	ldd	r24, Y+51	; 0x33
    134e:	9c a9       	ldd	r25, Y+52	; 0x34
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <LCD_Initialize+0x76>
		__ticks = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	98 ab       	std	Y+48, r25	; 0x30
    1366:	8f a7       	std	Y+47, r24	; 0x2f
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <LCD_Initialize+0xf4>
	else if (__tmp > 65535)
    136a:	69 a9       	ldd	r22, Y+49	; 0x31
    136c:	7a a9       	ldd	r23, Y+50	; 0x32
    136e:	8b a9       	ldd	r24, Y+51	; 0x33
    1370:	9c a9       	ldd	r25, Y+52	; 0x34
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <LCD_Initialize+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	6d a9       	ldd	r22, Y+53	; 0x35
    1384:	7e a9       	ldd	r23, Y+54	; 0x36
    1386:	8f a9       	ldd	r24, Y+55	; 0x37
    1388:	98 ad       	ldd	r25, Y+56	; 0x38
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	98 ab       	std	Y+48, r25	; 0x30
    13a8:	8f a7       	std	Y+47, r24	; 0x2f
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <LCD_Initialize+0xd6>
    13ac:	88 ec       	ldi	r24, 0xC8	; 200
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	9e a7       	std	Y+46, r25	; 0x2e
    13b2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_Initialize+0xc4>
    13bc:	9e a7       	std	Y+46, r25	; 0x2e
    13be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c2:	98 a9       	ldd	r25, Y+48	; 0x30
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	98 ab       	std	Y+48, r25	; 0x30
    13c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    13cc:	98 a9       	ldd	r25, Y+48	; 0x30
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	69 f7       	brne	.-38     	; 0x13ac <LCD_Initialize+0xb8>
    13d2:	14 c0       	rjmp	.+40     	; 0x13fc <LCD_Initialize+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	98 ab       	std	Y+48, r25	; 0x30
    13e6:	8f a7       	std	Y+47, r24	; 0x2f
    13e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ea:	98 a9       	ldd	r25, Y+48	; 0x30
    13ec:	9c a7       	std	Y+44, r25	; 0x2c
    13ee:	8b a7       	std	Y+43, r24	; 0x2b
    13f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_Initialize+0x100>
    13f8:	9c a7       	std	Y+44, r25	; 0x2c
    13fa:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(30);

LCD_WriteCmd(0x20);
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
LCD_WriteCmd(0x20);
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
LCD_WriteCmd(0x80);
    140c:	80 e8       	ldi	r24, 0x80	; 128
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e8       	ldi	r26, 0x80	; 128
    141a:	bf e3       	ldi	r27, 0x3F	; 63
    141c:	8f a3       	std	Y+39, r24	; 0x27
    141e:	98 a7       	std	Y+40, r25	; 0x28
    1420:	a9 a7       	std	Y+41, r26	; 0x29
    1422:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6f a1       	ldd	r22, Y+39	; 0x27
    1426:	78 a5       	ldd	r23, Y+40	; 0x28
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9a a5       	ldd	r25, Y+42	; 0x2a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8b a3       	std	Y+35, r24	; 0x23
    143e:	9c a3       	std	Y+36, r25	; 0x24
    1440:	ad a3       	std	Y+37, r26	; 0x25
    1442:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1444:	6b a1       	ldd	r22, Y+35	; 0x23
    1446:	7c a1       	ldd	r23, Y+36	; 0x24
    1448:	8d a1       	ldd	r24, Y+37	; 0x25
    144a:	9e a1       	ldd	r25, Y+38	; 0x26
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <LCD_Initialize+0x172>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9a a3       	std	Y+34, r25	; 0x22
    1462:	89 a3       	std	Y+33, r24	; 0x21
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <LCD_Initialize+0x1f0>
	else if (__tmp > 65535)
    1466:	6b a1       	ldd	r22, Y+35	; 0x23
    1468:	7c a1       	ldd	r23, Y+36	; 0x24
    146a:	8d a1       	ldd	r24, Y+37	; 0x25
    146c:	9e a1       	ldd	r25, Y+38	; 0x26
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <LCD_Initialize+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	6f a1       	ldd	r22, Y+39	; 0x27
    1480:	78 a5       	ldd	r23, Y+40	; 0x28
    1482:	89 a5       	ldd	r24, Y+41	; 0x29
    1484:	9a a5       	ldd	r25, Y+42	; 0x2a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9a a3       	std	Y+34, r25	; 0x22
    14a4:	89 a3       	std	Y+33, r24	; 0x21
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <LCD_Initialize+0x1d2>
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 a3       	std	Y+32, r25	; 0x20
    14ae:	8f 8f       	std	Y+31, r24	; 0x1f
    14b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b2:	98 a1       	ldd	r25, Y+32	; 0x20
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_Initialize+0x1c0>
    14b8:	98 a3       	std	Y+32, r25	; 0x20
    14ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	89 a1       	ldd	r24, Y+33	; 0x21
    14be:	9a a1       	ldd	r25, Y+34	; 0x22
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9a a3       	std	Y+34, r25	; 0x22
    14c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	89 a1       	ldd	r24, Y+33	; 0x21
    14c8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <LCD_Initialize+0x1b4>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <LCD_Initialize+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6b a1       	ldd	r22, Y+35	; 0x23
    14d2:	7c a1       	ldd	r23, Y+36	; 0x24
    14d4:	8d a1       	ldd	r24, Y+37	; 0x25
    14d6:	9e a1       	ldd	r25, Y+38	; 0x26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9a a3       	std	Y+34, r25	; 0x22
    14e2:	89 a3       	std	Y+33, r24	; 0x21
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ea:	8d 8f       	std	Y+29, r24	; 0x1d
    14ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <LCD_Initialize+0x1fc>
    14f4:	9e 8f       	std	Y+30, r25	; 0x1e
    14f6:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);

LCD_WriteCmd(0x00);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
LCD_WriteCmd(0xF0);
    1500:	80 ef       	ldi	r24, 0xF0	; 240
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e8       	ldi	r26, 0x80	; 128
    150e:	bf e3       	ldi	r27, 0x3F	; 63
    1510:	89 8f       	std	Y+25, r24	; 0x19
    1512:	9a 8f       	std	Y+26, r25	; 0x1a
    1514:	ab 8f       	std	Y+27, r26	; 0x1b
    1516:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	69 8d       	ldd	r22, Y+25	; 0x19
    151a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a ef       	ldi	r20, 0xFA	; 250
    1526:	54 e4       	ldi	r21, 0x44	; 68
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8d 8b       	std	Y+21, r24	; 0x15
    1532:	9e 8b       	std	Y+22, r25	; 0x16
    1534:	af 8b       	std	Y+23, r26	; 0x17
    1536:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <LCD_Initialize+0x266>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c 8b       	std	Y+20, r25	; 0x14
    1556:	8b 8b       	std	Y+19, r24	; 0x13
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <LCD_Initialize+0x2e4>
	else if (__tmp > 65535)
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <LCD_Initialize+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	69 8d       	ldd	r22, Y+25	; 0x19
    1574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <LCD_Initialize+0x2c6>
    159c:	88 ec       	ldi	r24, 0xC8	; 200
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	9a 89       	ldd	r25, Y+18	; 0x12
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <LCD_Initialize+0x2b4>
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8b 89       	ldd	r24, Y+19	; 0x13
    15bc:	9c 89       	ldd	r25, Y+20	; 0x14
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <LCD_Initialize+0x2a8>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <LCD_Initialize+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6d 89       	ldd	r22, Y+21	; 0x15
    15c6:	7e 89       	ldd	r23, Y+22	; 0x16
    15c8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ca:	98 8d       	ldd	r25, Y+24	; 0x18
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	98 8b       	std	Y+16, r25	; 0x10
    15de:	8f 87       	std	Y+15, r24	; 0x0f
    15e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e2:	98 89       	ldd	r25, Y+16	; 0x10
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <LCD_Initialize+0x2f0>
    15e8:	98 8b       	std	Y+16, r25	; 0x10
    15ea:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);

LCD_WriteCmd(0x00);
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
LCD_WriteCmd(0x10);
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e4       	ldi	r27, 0x40	; 64
    1604:	8b 87       	std	Y+11, r24	; 0x0b
    1606:	9c 87       	std	Y+12, r25	; 0x0c
    1608:	ad 87       	std	Y+13, r26	; 0x0d
    160a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	6b 85       	ldd	r22, Y+11	; 0x0b
    160e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1610:	8d 85       	ldd	r24, Y+13	; 0x0d
    1612:	9e 85       	ldd	r25, Y+14	; 0x0e
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a ef       	ldi	r20, 0xFA	; 250
    161a:	54 e4       	ldi	r21, 0x44	; 68
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8f 83       	std	Y+7, r24	; 0x07
    1626:	98 87       	std	Y+8, r25	; 0x08
    1628:	a9 87       	std	Y+9, r26	; 0x09
    162a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1640:	88 23       	and	r24, r24
    1642:	2c f4       	brge	.+10     	; 0x164e <LCD_Initialize+0x35a>
		__ticks = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	3f c0       	rjmp	.+126    	; 0x16cc <LCD_Initialize+0x3d8>
	else if (__tmp > 65535)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	4c f5       	brge	.+82     	; 0x16b8 <LCD_Initialize+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <LCD_Initialize+0x3ba>
    1690:	88 ec       	ldi	r24, 0xC8	; 200
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <LCD_Initialize+0x3a8>
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	69 f7       	brne	.-38     	; 0x1690 <LCD_Initialize+0x39c>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <LCD_Initialize+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_Initialize+0x3e4>
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);

InitStepFinished =1;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	80 93 68 00 	sts	0x0068, r24
}
    16e6:	e8 96       	adiw	r28, 0x38	; 56
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <LCD_WriteCmd>:

void LCD_WriteCmd(u8 Cmd)
{// Cmd 0000 0000
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	ab 97       	sbiw	r28, 0x2b	; 43
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	8b a7       	std	Y+43, r24	; 0x2b
 // 0010 0000
DIO_SetPinValue(PORTB , pin1 , LOW); //RS 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTB , pin2 , LOW); //RW 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

DIO_SetPinValue(PORTA , pin4 , GET_BIt(Cmd , 4)); //DB 4
    1722:	8b a5       	ldd	r24, Y+43	; 0x2b
    1724:	82 95       	swap	r24
    1726:	8f 70       	andi	r24, 0x0F	; 15
    1728:	98 2f       	mov	r25, r24
    172a:	91 70       	andi	r25, 0x01	; 1
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	64 e0       	ldi	r22, 0x04	; 4
    1730:	49 2f       	mov	r20, r25
    1732:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin5 , GET_BIt(Cmd , 5)); //DB 5
    1736:	8b a5       	ldd	r24, Y+43	; 0x2b
    1738:	82 95       	swap	r24
    173a:	86 95       	lsr	r24
    173c:	87 70       	andi	r24, 0x07	; 7
    173e:	98 2f       	mov	r25, r24
    1740:	91 70       	andi	r25, 0x01	; 1
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	65 e0       	ldi	r22, 0x05	; 5
    1746:	49 2f       	mov	r20, r25
    1748:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin6 , GET_BIt(Cmd , 6)); //DB 6
    174c:	8b a5       	ldd	r24, Y+43	; 0x2b
    174e:	82 95       	swap	r24
    1750:	86 95       	lsr	r24
    1752:	86 95       	lsr	r24
    1754:	83 70       	andi	r24, 0x03	; 3
    1756:	98 2f       	mov	r25, r24
    1758:	91 70       	andi	r25, 0x01	; 1
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	66 e0       	ldi	r22, 0x06	; 6
    175e:	49 2f       	mov	r20, r25
    1760:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin7 , GET_BIt(Cmd , 7)); //DB 7
    1764:	8b a5       	ldd	r24, Y+43	; 0x2b
    1766:	98 2f       	mov	r25, r24
    1768:	99 1f       	adc	r25, r25
    176a:	99 27       	eor	r25, r25
    176c:	99 1f       	adc	r25, r25
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	67 e0       	ldi	r22, 0x07	; 7
    1772:	49 2f       	mov	r20, r25
    1774:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

DIO_SetPinValue(PORTB , pin3 , HIGH);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	63 e0       	ldi	r22, 0x03	; 3
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e8       	ldi	r26, 0x80	; 128
    1788:	bf e3       	ldi	r27, 0x3F	; 63
    178a:	8f a3       	std	Y+39, r24	; 0x27
    178c:	98 a7       	std	Y+40, r25	; 0x28
    178e:	a9 a7       	std	Y+41, r26	; 0x29
    1790:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	6f a1       	ldd	r22, Y+39	; 0x27
    1794:	78 a5       	ldd	r23, Y+40	; 0x28
    1796:	89 a5       	ldd	r24, Y+41	; 0x29
    1798:	9a a5       	ldd	r25, Y+42	; 0x2a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a ef       	ldi	r20, 0xFA	; 250
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8b a3       	std	Y+35, r24	; 0x23
    17ac:	9c a3       	std	Y+36, r25	; 0x24
    17ae:	ad a3       	std	Y+37, r26	; 0x25
    17b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17b2:	6b a1       	ldd	r22, Y+35	; 0x23
    17b4:	7c a1       	ldd	r23, Y+36	; 0x24
    17b6:	8d a1       	ldd	r24, Y+37	; 0x25
    17b8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_WriteCmd+0xdc>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9a a3       	std	Y+34, r25	; 0x22
    17d0:	89 a3       	std	Y+33, r24	; 0x21
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <LCD_WriteCmd+0x15a>
	else if (__tmp > 65535)
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <LCD_WriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	6f a1       	ldd	r22, Y+39	; 0x27
    17ee:	78 a5       	ldd	r23, Y+40	; 0x28
    17f0:	89 a5       	ldd	r24, Y+41	; 0x29
    17f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9a a3       	std	Y+34, r25	; 0x22
    1812:	89 a3       	std	Y+33, r24	; 0x21
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_WriteCmd+0x13c>
    1816:	88 ec       	ldi	r24, 0xC8	; 200
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	98 a3       	std	Y+32, r25	; 0x20
    181c:	8f 8f       	std	Y+31, r24	; 0x1f
    181e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1820:	98 a1       	ldd	r25, Y+32	; 0x20
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_WriteCmd+0x12a>
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	89 a1       	ldd	r24, Y+33	; 0x21
    182c:	9a a1       	ldd	r25, Y+34	; 0x22
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9a a3       	std	Y+34, r25	; 0x22
    1832:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	89 a1       	ldd	r24, Y+33	; 0x21
    1836:	9a a1       	ldd	r25, Y+34	; 0x22
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <LCD_WriteCmd+0x11e>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <LCD_WriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6b a1       	ldd	r22, Y+35	; 0x23
    1840:	7c a1       	ldd	r23, Y+36	; 0x24
    1842:	8d a1       	ldd	r24, Y+37	; 0x25
    1844:	9e a1       	ldd	r25, Y+38	; 0x26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9a a3       	std	Y+34, r25	; 0x22
    1850:	89 a3       	std	Y+33, r24	; 0x21
    1852:	89 a1       	ldd	r24, Y+33	; 0x21
    1854:	9a a1       	ldd	r25, Y+34	; 0x22
    1856:	9e 8f       	std	Y+30, r25	; 0x1e
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
    185a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_WriteCmd+0x166>
    1862:	9e 8f       	std	Y+30, r25	; 0x1e
    1864:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
DIO_SetPinValue(PORTB , pin3 , LOW);
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	63 e0       	ldi	r22, 0x03	; 3
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

if(InitStepFinished)
    1870:	80 91 68 00 	lds	r24, 0x0068
    1874:	88 23       	and	r24, r24
    1876:	09 f4       	brne	.+2      	; 0x187a <LCD_WriteCmd+0x182>
    1878:	a2 c0       	rjmp	.+324    	; 0x19be <LCD_WriteCmd+0x2c6>
{

DIO_SetPinValue(PORTA , pin4 , GET_BIt(Cmd , 0)); //DB 4
    187a:	8b a5       	ldd	r24, Y+43	; 0x2b
    187c:	98 2f       	mov	r25, r24
    187e:	91 70       	andi	r25, 0x01	; 1
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	49 2f       	mov	r20, r25
    1886:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin5 , GET_BIt(Cmd , 1)); //DB 5
    188a:	8b a5       	ldd	r24, Y+43	; 0x2b
    188c:	86 95       	lsr	r24
    188e:	98 2f       	mov	r25, r24
    1890:	91 70       	andi	r25, 0x01	; 1
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	65 e0       	ldi	r22, 0x05	; 5
    1896:	49 2f       	mov	r20, r25
    1898:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin6 , GET_BIt(Cmd , 2)); //DB 6
    189c:	8b a5       	ldd	r24, Y+43	; 0x2b
    189e:	86 95       	lsr	r24
    18a0:	86 95       	lsr	r24
    18a2:	98 2f       	mov	r25, r24
    18a4:	91 70       	andi	r25, 0x01	; 1
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	49 2f       	mov	r20, r25
    18ac:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin7 , GET_BIt(Cmd , 3)); //DB 7
    18b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b2:	86 95       	lsr	r24
    18b4:	86 95       	lsr	r24
    18b6:	86 95       	lsr	r24
    18b8:	98 2f       	mov	r25, r24
    18ba:	91 70       	andi	r25, 0x01	; 1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	67 e0       	ldi	r22, 0x07	; 7
    18c0:	49 2f       	mov	r20, r25
    18c2:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

DIO_SetPinValue(PORTB , pin3 , HIGH);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	63 e0       	ldi	r22, 0x03	; 3
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	89 8f       	std	Y+25, r24	; 0x19
    18da:	9a 8f       	std	Y+26, r25	; 0x1a
    18dc:	ab 8f       	std	Y+27, r26	; 0x1b
    18de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	69 8d       	ldd	r22, Y+25	; 0x19
    18e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8d 8b       	std	Y+21, r24	; 0x15
    18fa:	9e 8b       	std	Y+22, r25	; 0x16
    18fc:	af 8b       	std	Y+23, r26	; 0x17
    18fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1900:	6d 89       	ldd	r22, Y+21	; 0x15
    1902:	7e 89       	ldd	r23, Y+22	; 0x16
    1904:	8f 89       	ldd	r24, Y+23	; 0x17
    1906:	98 8d       	ldd	r25, Y+24	; 0x18
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <LCD_WriteCmd+0x22a>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9c 8b       	std	Y+20, r25	; 0x14
    191e:	8b 8b       	std	Y+19, r24	; 0x13
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <LCD_WriteCmd+0x2a8>
	else if (__tmp > 65535)
    1922:	6d 89       	ldd	r22, Y+21	; 0x15
    1924:	7e 89       	ldd	r23, Y+22	; 0x16
    1926:	8f 89       	ldd	r24, Y+23	; 0x17
    1928:	98 8d       	ldd	r25, Y+24	; 0x18
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <LCD_WriteCmd+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	69 8d       	ldd	r22, Y+25	; 0x19
    193c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9c 8b       	std	Y+20, r25	; 0x14
    1960:	8b 8b       	std	Y+19, r24	; 0x13
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_WriteCmd+0x28a>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9a 8b       	std	Y+18, r25	; 0x12
    196a:	89 8b       	std	Y+17, r24	; 0x11
    196c:	89 89       	ldd	r24, Y+17	; 0x11
    196e:	9a 89       	ldd	r25, Y+18	; 0x12
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_WriteCmd+0x278>
    1974:	9a 8b       	std	Y+18, r25	; 0x12
    1976:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9c 8b       	std	Y+20, r25	; 0x14
    1980:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8b 89       	ldd	r24, Y+19	; 0x13
    1984:	9c 89       	ldd	r25, Y+20	; 0x14
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_WriteCmd+0x26c>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <LCD_WriteCmd+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6d 89       	ldd	r22, Y+21	; 0x15
    198e:	7e 89       	ldd	r23, Y+22	; 0x16
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	98 8b       	std	Y+16, r25	; 0x10
    19a6:	8f 87       	std	Y+15, r24	; 0x0f
    19a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19aa:	98 89       	ldd	r25, Y+16	; 0x10
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_WriteCmd+0x2b4>
    19b0:	98 8b       	std	Y+16, r25	; 0x10
    19b2:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
DIO_SetPinValue(PORTB , pin3 , LOW);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	63 e0       	ldi	r22, 0x03	; 3
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e4       	ldi	r27, 0x40	; 64
    19c6:	8b 87       	std	Y+11, r24	; 0x0b
    19c8:	9c 87       	std	Y+12, r25	; 0x0c
    19ca:	ad 87       	std	Y+13, r26	; 0x0d
    19cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	98 87       	std	Y+8, r25	; 0x08
    19ea:	a9 87       	std	Y+9, r26	; 0x09
    19ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_WriteCmd+0x318>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_WriteCmd+0x396>
	else if (__tmp > 65535)
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_WriteCmd+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_WriteCmd+0x378>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_WriteCmd+0x366>
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_WriteCmd+0x35a>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_WriteCmd+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_WriteCmd+0x3a2>
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
}
_delay_ms(2);

}
    1aa2:	ab 96       	adiw	r28, 0x2b	; 43
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <LCD_WriteData>:

void LCD_WriteData(u8 Data)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	ab 97       	sbiw	r28, 0x2b	; 43
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_SetPinValue(PORTB , pin1 , HIGH); //RS 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB , pin2 , LOW); //RW 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

	DIO_SetPinValue(PORTA , pin4 , GET_BIt(Data , 4)); //DB 4
    1ade:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae0:	82 95       	swap	r24
    1ae2:	8f 70       	andi	r24, 0x0F	; 15
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	91 70       	andi	r25, 0x01	; 1
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	64 e0       	ldi	r22, 0x04	; 4
    1aec:	49 2f       	mov	r20, r25
    1aee:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin5 , GET_BIt(Data , 5)); //DB 5
    1af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af4:	82 95       	swap	r24
    1af6:	86 95       	lsr	r24
    1af8:	87 70       	andi	r24, 0x07	; 7
    1afa:	98 2f       	mov	r25, r24
    1afc:	91 70       	andi	r25, 0x01	; 1
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	65 e0       	ldi	r22, 0x05	; 5
    1b02:	49 2f       	mov	r20, r25
    1b04:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin6 , GET_BIt(Data , 6)); //DB 6
    1b08:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0a:	82 95       	swap	r24
    1b0c:	86 95       	lsr	r24
    1b0e:	86 95       	lsr	r24
    1b10:	83 70       	andi	r24, 0x03	; 3
    1b12:	98 2f       	mov	r25, r24
    1b14:	91 70       	andi	r25, 0x01	; 1
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	66 e0       	ldi	r22, 0x06	; 6
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin7 , GET_BIt(Data , 7)); //DB 7
    1b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b22:	98 2f       	mov	r25, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	99 27       	eor	r25, r25
    1b28:	99 1f       	adc	r25, r25
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	49 2f       	mov	r20, r25
    1b30:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB , pin3 , HIGH);
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	63 e0       	ldi	r22, 0x03	; 3
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	8f a3       	std	Y+39, r24	; 0x27
    1b48:	98 a7       	std	Y+40, r25	; 0x28
    1b4a:	a9 a7       	std	Y+41, r26	; 0x29
    1b4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b50:	78 a5       	ldd	r23, Y+40	; 0x28
    1b52:	89 a5       	ldd	r24, Y+41	; 0x29
    1b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8b a3       	std	Y+35, r24	; 0x23
    1b68:	9c a3       	std	Y+36, r25	; 0x24
    1b6a:	ad a3       	std	Y+37, r26	; 0x25
    1b6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b70:	7c a1       	ldd	r23, Y+36	; 0x24
    1b72:	8d a1       	ldd	r24, Y+37	; 0x25
    1b74:	9e a1       	ldd	r25, Y+38	; 0x26
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_WriteData+0xdc>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    1b90:	6b a1       	ldd	r22, Y+35	; 0x23
    1b92:	7c a1       	ldd	r23, Y+36	; 0x24
    1b94:	8d a1       	ldd	r24, Y+37	; 0x25
    1b96:	9e a1       	ldd	r25, Y+38	; 0x26
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6f a1       	ldd	r22, Y+39	; 0x27
    1baa:	78 a5       	ldd	r23, Y+40	; 0x28
    1bac:	89 a5       	ldd	r24, Y+41	; 0x29
    1bae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9a a3       	std	Y+34, r25	; 0x22
    1bce:	89 a3       	std	Y+33, r24	; 0x21
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_WriteData+0x13c>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	98 a3       	std	Y+32, r25	; 0x20
    1bd8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bdc:	98 a1       	ldd	r25, Y+32	; 0x20
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_WriteData+0x12a>
    1be2:	98 a3       	std	Y+32, r25	; 0x20
    1be4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	89 a1       	ldd	r24, Y+33	; 0x21
    1be8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9a a3       	std	Y+34, r25	; 0x22
    1bee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_WriteData+0x11e>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9a a3       	std	Y+34, r25	; 0x22
    1c0c:	89 a3       	std	Y+33, r24	; 0x21
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	9e 8f       	std	Y+30, r25	; 0x1e
    1c14:	8d 8f       	std	Y+29, r24	; 0x1d
    1c16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_WriteData+0x166>
    1c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(PORTB , pin3 , LOW);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	63 e0       	ldi	r22, 0x03	; 3
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

	DIO_SetPinValue(PORTA , pin4 , GET_BIt(Data , 0)); //DB 4
    1c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2e:	98 2f       	mov	r25, r24
    1c30:	91 70       	andi	r25, 0x01	; 1
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	49 2f       	mov	r20, r25
    1c38:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin5 , GET_BIt(Data , 1)); //DB 5
    1c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3e:	86 95       	lsr	r24
    1c40:	98 2f       	mov	r25, r24
    1c42:	91 70       	andi	r25, 0x01	; 1
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	65 e0       	ldi	r22, 0x05	; 5
    1c48:	49 2f       	mov	r20, r25
    1c4a:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin6 , GET_BIt(Data , 2)); //DB 6
    1c4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c50:	86 95       	lsr	r24
    1c52:	86 95       	lsr	r24
    1c54:	98 2f       	mov	r25, r24
    1c56:	91 70       	andi	r25, 0x01	; 1
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	66 e0       	ldi	r22, 0x06	; 6
    1c5c:	49 2f       	mov	r20, r25
    1c5e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA , pin7 , GET_BIt(Data , 3)); //DB 7
    1c62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c64:	86 95       	lsr	r24
    1c66:	86 95       	lsr	r24
    1c68:	86 95       	lsr	r24
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	91 70       	andi	r25, 0x01	; 1
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	67 e0       	ldi	r22, 0x07	; 7
    1c72:	49 2f       	mov	r20, r25
    1c74:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>

	DIO_SetPinValue(PORTB , pin3 , HIGH);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	63 e0       	ldi	r22, 0x03	; 3
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	89 8f       	std	Y+25, r24	; 0x19
    1c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8d 8b       	std	Y+21, r24	; 0x15
    1cac:	9e 8b       	std	Y+22, r25	; 0x16
    1cae:	af 8b       	std	Y+23, r26	; 0x17
    1cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_WriteData+0x220>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_WriteData+0x29e>
	else if (__tmp > 65535)
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_WriteData+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	69 8d       	ldd	r22, Y+25	; 0x19
    1cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_WriteData+0x280>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a 8b       	std	Y+18, r25	; 0x12
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	89 89       	ldd	r24, Y+17	; 0x11
    1d20:	9a 89       	ldd	r25, Y+18	; 0x12
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_WriteData+0x26e>
    1d26:	9a 8b       	std	Y+18, r25	; 0x12
    1d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_WriteData+0x262>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_WriteData+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d40:	7e 89       	ldd	r23, Y+22	; 0x16
    1d42:	8f 89       	ldd	r24, Y+23	; 0x17
    1d44:	98 8d       	ldd	r25, Y+24	; 0x18
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	98 8b       	std	Y+16, r25	; 0x10
    1d58:	8f 87       	std	Y+15, r24	; 0x0f
    1d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5c:	98 89       	ldd	r25, Y+16	; 0x10
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_WriteData+0x2aa>
    1d62:	98 8b       	std	Y+16, r25	; 0x10
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(PORTB , pin3 , LOW);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	63 e0       	ldi	r22, 0x03	; 3
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 e0       	ldi	r26, 0x00	; 0
    1d76:	b0 e4       	ldi	r27, 0x40	; 64
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_WriteData+0x30e>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_WriteData+0x38c>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_WriteData+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_WriteData+0x36e>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_WriteData+0x35c>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_WriteData+0x350>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_WriteData+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_WriteData+0x398>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

}
    1e54:	ab 96       	adiw	r28, 0x2b	; 43
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_1>:
 */

#include <avr/delay.h>

void LCD_1()
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
LCD_Initialize();
    1e7a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <LCD_Initialize>

LCD_WriteData('E');
    1e7e:	85 e4       	ldi	r24, 0x45	; 69
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('n');
    1e86:	8e e6       	ldi	r24, 0x6E	; 110
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('g');
    1e8e:	87 e6       	ldi	r24, 0x67	; 103
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('M');
    1e96:	8d e4       	ldi	r24, 0x4D	; 77
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('o');
    1e9e:	8f e6       	ldi	r24, 0x6F	; 111
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('h');
    1ea6:	88 e6       	ldi	r24, 0x68	; 104
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('m');
    1eae:	8d e6       	ldi	r24, 0x6D	; 109
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('e');
    1eb6:	85 e6       	ldi	r24, 0x65	; 101
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
LCD_WriteData('d');
    1ebe:	84 e6       	ldi	r24, 0x64	; 100
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_WriteData>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e8       	ldi	r25, 0x80	; 128
    1eca:	ab e3       	ldi	r26, 0x3B	; 59
    1ecc:	b5 e4       	ldi	r27, 0x45	; 69
    1ece:	8b 87       	std	Y+11, r24	; 0x0b
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	ad 87       	std	Y+13, r26	; 0x0d
    1ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a ef       	ldi	r20, 0xFA	; 250
    1ee4:	54 e4       	ldi	r21, 0x44	; 68
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8f 83       	std	Y+7, r24	; 0x07
    1ef0:	98 87       	std	Y+8, r25	; 0x08
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
    1ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_1+0xb2>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_1+0x130>
	else if (__tmp > 65535)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_1+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_1+0x112>
    1f5a:	88 ec       	ldi	r24, 0xC8	; 200
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_1+0x100>
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_1+0xf4>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_1+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_1+0x13c>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(3000);
LCD_WriteCmd(0x01);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LCD_WriteCmd>


}
    1fb2:	2e 96       	adiw	r28, 0x0e	; 14
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <LED>:
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"
#include "avr/delay.h"

void LED()
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	6c 97       	sbiw	r28, 0x1c	; 28
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61

  //DIO_SetPortDirection(PORTC , OUTPUT);
  //DIO_SetPortValue(PORTC ,0xFF);

    DIO_SetPinDirection(PORTC , pin1 , OUTPUT);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
while(1)
{
    DIO_SetPinValue(PORTC , pin1 , HIGH);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ff2:	b2 e4       	ldi	r27, 0x42	; 66
    1ff4:	89 8f       	std	Y+25, r24	; 0x19
    1ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8d 8b       	std	Y+21, r24	; 0x15
    2016:	9e 8b       	std	Y+22, r25	; 0x16
    2018:	af 8b       	std	Y+23, r26	; 0x17
    201a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <LED+0x7a>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	3f c0       	rjmp	.+126    	; 0x20bc <LED+0xf8>
	else if (__tmp > 65535)
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	4c f5       	brge	.+82     	; 0x20a8 <LED+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2056:	69 8d       	ldd	r22, Y+25	; 0x19
    2058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
    207e:	0f c0       	rjmp	.+30     	; 0x209e <LED+0xda>
    2080:	88 ec       	ldi	r24, 0xC8	; 200
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9a 8b       	std	Y+18, r25	; 0x12
    2086:	89 8b       	std	Y+17, r24	; 0x11
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <LED+0xc8>
    2090:	9a 8b       	std	Y+18, r25	; 0x12
    2092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9c 8b       	std	Y+20, r25	; 0x14
    209c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	69 f7       	brne	.-38     	; 0x2080 <LED+0xbc>
    20a6:	14 c0       	rjmp	.+40     	; 0x20d0 <LED+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	98 8b       	std	Y+16, r25	; 0x10
    20c2:	8f 87       	std	Y+15, r24	; 0x0f
    20c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20c6:	98 89       	ldd	r25, Y+16	; 0x10
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LED+0x104>
    20cc:	98 8b       	std	Y+16, r25	; 0x10
    20ce:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(100);
    DIO_SetPinValue(PORTC , pin1 , LOW);
    20d0:	82 e0       	ldi	r24, 0x02	; 2
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a8 ec       	ldi	r26, 0xC8	; 200
    20e0:	b2 e4       	ldi	r27, 0x42	; 66
    20e2:	8b 87       	std	Y+11, r24	; 0x0b
    20e4:	9c 87       	std	Y+12, r25	; 0x0c
    20e6:	ad 87       	std	Y+13, r26	; 0x0d
    20e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a ef       	ldi	r20, 0xFA	; 250
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8f 83       	std	Y+7, r24	; 0x07
    2104:	98 87       	std	Y+8, r25	; 0x08
    2106:	a9 87       	std	Y+9, r26	; 0x09
    2108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LED+0x168>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LED+0x1e6>
	else if (__tmp > 65535)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LED+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LED+0x1c8>
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LED+0x1b6>
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LED+0x1aa>
    2194:	26 cf       	rjmp	.-436    	; 0x1fe2 <LED+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LED+0x1f2>
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	11 cf       	rjmp	.-478    	; 0x1fe2 <LED+0x1e>

000021c0 <PUCH_BUTTON_1>:
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"


void PUCH_BUTTON_1()
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTA , pin0, INPUT);
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA , pin1, OUTPUT);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

while(1)
{
	STD_level_Type Pin_Value = DIO_GetpinValue(PORTA , pin0);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_GetpinValue>
    21e6:	89 83       	std	Y+1, r24	; 0x01

	if(/*DIO_GetpinValue(PORTA , pin0)*/Pin_Value ==HIGH)
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	31 f4       	brne	.+12     	; 0x21fa <PUCH_BUTTON_1+0x3a>
	{
	DIO_SetPinValue(PORTA , pin1, HIGH);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    21f8:	f2 cf       	rjmp	.-28     	; 0x21de <PUCH_BUTTON_1+0x1e>
	}

	else if (/*DIO_GetpinValue(PORTA , pin0)*/ Pin_Value ==LOW)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	88 23       	and	r24, r24
    21fe:	79 f7       	brne	.-34     	; 0x21de <PUCH_BUTTON_1+0x1e>
	{
		DIO_SetPinValue(PORTA , pin1, LOW);
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    220a:	e9 cf       	rjmp	.-46     	; 0x21de <PUCH_BUTTON_1+0x1e>

0000220c <PUCH_BUTTON_2>:
#include "../MCAL/DIO/DIO_types.h"
#include "../MCAL/DIO/DIO.h"


void PUCH_BUTTON_2()
{
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	cf 58       	subi	r28, 0x8F	; 143
    221a:	d0 40       	sbci	r29, 0x00	; 0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
DIO_SetPinDirection(PORTA , pin0 , INPUT);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin1 , INPUT);
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin2 , INPUT);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	62 e0       	ldi	r22, 0x02	; 2
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

DIO_SetPinDirection(PORTA , pin3 , OUTPUT);
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	63 e0       	ldi	r22, 0x03	; 3
    2248:	41 e0       	ldi	r20, 0x01	; 1
    224a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin4 , OUTPUT);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	64 e0       	ldi	r22, 0x04	; 4
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>
DIO_SetPinDirection(PORTA , pin5 , OUTPUT);
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	65 e0       	ldi	r22, 0x05	; 5
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_SetPinDirection>

while(1)
{

STD_level_Type Button0_Value = DIO_GetpinValue(PORTA , pin0);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_GetpinValue>
    226a:	fe 01       	movw	r30, r28
    226c:	e1 57       	subi	r30, 0x71	; 113
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 83       	st	Z, r24
STD_level_Type Button1_Value = DIO_GetpinValue(PORTA , pin1);
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_GetpinValue>
    227a:	fe 01       	movw	r30, r28
    227c:	e2 57       	subi	r30, 0x72	; 114
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 83       	st	Z, r24
STD_level_Type Button2_Value = DIO_GetpinValue(PORTA , pin2);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DIO_GetpinValue>
    228a:	fe 01       	movw	r30, r28
    228c:	e3 57       	subi	r30, 0x73	; 115
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 83       	st	Z, r24


if(Button0_Value == HIGH && Button1_Value == LOW && Button2_Value == LOW)
    2292:	fe 01       	movw	r30, r28
    2294:	e1 57       	subi	r30, 0x71	; 113
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	e1 f4       	brne	.+56     	; 0x22d6 <PUCH_BUTTON_2+0xca>
    229e:	fe 01       	movw	r30, r28
    22a0:	e2 57       	subi	r30, 0x72	; 114
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	b1 f4       	brne	.+44     	; 0x22d6 <PUCH_BUTTON_2+0xca>
    22aa:	fe 01       	movw	r30, r28
    22ac:	e3 57       	subi	r30, 0x73	; 115
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 81       	ld	r24, Z
    22b2:	88 23       	and	r24, r24
    22b4:	81 f4       	brne	.+32     	; 0x22d6 <PUCH_BUTTON_2+0xca>
{
DIO_SetPinValue(PORTA , pin3 , HIGH);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	63 e0       	ldi	r22, 0x03	; 3
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin4 , HIGH);
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	64 e0       	ldi	r22, 0x04	; 4
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA , pin5 , HIGH);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	65 e0       	ldi	r22, 0x05	; 5
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    22d4:	c6 cf       	rjmp	.-116    	; 0x2262 <PUCH_BUTTON_2+0x56>

}
else if (Button0_Value == LOW && Button1_Value == LOW && Button2_Value == LOW)
    22d6:	fe 01       	movw	r30, r28
    22d8:	e1 57       	subi	r30, 0x71	; 113
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	88 23       	and	r24, r24
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <PUCH_BUTTON_2+0xd8>
    22e2:	56 c2       	rjmp	.+1196   	; 0x2790 <PUCH_BUTTON_2+0x584>
    22e4:	fe 01       	movw	r30, r28
    22e6:	e2 57       	subi	r30, 0x72	; 114
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <PUCH_BUTTON_2+0xe6>
    22f0:	4f c2       	rjmp	.+1182   	; 0x2790 <PUCH_BUTTON_2+0x584>
    22f2:	fe 01       	movw	r30, r28
    22f4:	e3 57       	subi	r30, 0x73	; 115
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	88 23       	and	r24, r24
    22fc:	09 f0       	breq	.+2      	; 0x2300 <PUCH_BUTTON_2+0xf4>
    22fe:	48 c2       	rjmp	.+1168   	; 0x2790 <PUCH_BUTTON_2+0x584>
{
DIO_SetPinValue(PORTA, pin3 , HIGH);
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	63 e0       	ldi	r22, 0x03	; 3
    2304:	41 e0       	ldi	r20, 0x01	; 1
    2306:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	64 e0       	ldi	r22, 0x04	; 4
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , LOW);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	65 e0       	ldi	r22, 0x05	; 5
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    231e:	fe 01       	movw	r30, r28
    2320:	e7 57       	subi	r30, 0x77	; 119
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a6 e9       	ldi	r26, 0x96	; 150
    232a:	b3 e4       	ldi	r27, 0x43	; 67
    232c:	80 83       	st	Z, r24
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	a2 83       	std	Z+2, r26	; 0x02
    2332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	8e 01       	movw	r16, r28
    2336:	0b 57       	subi	r16, 0x7B	; 123
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e7 57       	subi	r30, 0x77	; 119
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	4a ef       	ldi	r20, 0xFA	; 250
    234e:	54 e4       	ldi	r21, 0x44	; 68
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	f8 01       	movw	r30, r16
    235a:	80 83       	st	Z, r24
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	a2 83       	std	Z+2, r26	; 0x02
    2360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2362:	fe 01       	movw	r30, r28
    2364:	eb 57       	subi	r30, 0x7B	; 123
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	44 f4       	brge	.+16     	; 0x2390 <PUCH_BUTTON_2+0x184>
		__ticks = 1;
    2380:	fe 01       	movw	r30, r28
    2382:	ed 57       	subi	r30, 0x7D	; 125
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	64 c0       	rjmp	.+200    	; 0x2458 <PUCH_BUTTON_2+0x24c>
	else if (__tmp > 65535)
    2390:	fe 01       	movw	r30, r28
    2392:	eb 57       	subi	r30, 0x7B	; 123
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	4f e7       	ldi	r20, 0x7F	; 127
    23a4:	57 e4       	ldi	r21, 0x47	; 71
    23a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	0c f0       	brlt	.+2      	; 0x23b0 <PUCH_BUTTON_2+0x1a4>
    23ae:	43 c0       	rjmp	.+134    	; 0x2436 <PUCH_BUTTON_2+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 57       	subi	r30, 0x77	; 119
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8e 01       	movw	r16, r28
    23d0:	0d 57       	subi	r16, 0x7D	; 125
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	f8 01       	movw	r30, r16
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	1f c0       	rjmp	.+62     	; 0x2426 <PUCH_BUTTON_2+0x21a>
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 57       	subi	r30, 0x7F	; 127
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	88 ec       	ldi	r24, 0xC8	; 200
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	fe 01       	movw	r30, r28
    23f8:	ef 57       	subi	r30, 0x7F	; 127
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <PUCH_BUTTON_2+0x1f4>
    2404:	fe 01       	movw	r30, r28
    2406:	ef 57       	subi	r30, 0x7F	; 127
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	de 01       	movw	r26, r28
    2410:	ad 57       	subi	r26, 0x7D	; 125
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	ed 57       	subi	r30, 0x7D	; 125
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	11 96       	adiw	r26, 0x01	; 1
    2422:	9c 93       	st	X, r25
    2424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	fe 01       	movw	r30, r28
    2428:	ed 57       	subi	r30, 0x7D	; 125
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	91 81       	ldd	r25, Z+1	; 0x01
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	d1 f6       	brne	.-76     	; 0x23e8 <PUCH_BUTTON_2+0x1dc>
    2434:	27 c0       	rjmp	.+78     	; 0x2484 <PUCH_BUTTON_2+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	8e 01       	movw	r16, r28
    2438:	0d 57       	subi	r16, 0x7D	; 125
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	eb 57       	subi	r30, 0x7B	; 123
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	f8 01       	movw	r30, r16
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	de 01       	movw	r26, r28
    245a:	a1 58       	subi	r26, 0x81	; 129
    245c:	bf 4f       	sbci	r27, 0xFF	; 255
    245e:	fe 01       	movw	r30, r28
    2460:	ed 57       	subi	r30, 0x7D	; 125
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	8d 93       	st	X+, r24
    246a:	9c 93       	st	X, r25
    246c:	fe 01       	movw	r30, r28
    246e:	e1 58       	subi	r30, 0x81	; 129
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <PUCH_BUTTON_2+0x26a>
    247a:	fe 01       	movw	r30, r28
    247c:	e1 58       	subi	r30, 0x81	; 129
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	80 83       	st	Z, r24
_delay_ms(300);

DIO_SetPinValue(PORTA, pin3 , LOW);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	63 e0       	ldi	r22, 0x03	; 3
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , HIGH);
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	64 e0       	ldi	r22, 0x04	; 4
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , LOW);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	65 e0       	ldi	r22, 0x05	; 5
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    24a2:	fe 01       	movw	r30, r28
    24a4:	e5 58       	subi	r30, 0x85	; 133
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a6 e9       	ldi	r26, 0x96	; 150
    24ae:	b3 e4       	ldi	r27, 0x43	; 67
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	a2 83       	std	Z+2, r26	; 0x02
    24b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	8e 01       	movw	r16, r28
    24ba:	09 58       	subi	r16, 0x89	; 137
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	fe 01       	movw	r30, r28
    24c0:	e5 58       	subi	r30, 0x85	; 133
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a ef       	ldi	r20, 0xFA	; 250
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	f8 01       	movw	r30, r16
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e9 58       	subi	r30, 0x89	; 137
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	44 f4       	brge	.+16     	; 0x2514 <PUCH_BUTTON_2+0x308>
		__ticks = 1;
    2504:	fe 01       	movw	r30, r28
    2506:	eb 58       	subi	r30, 0x8B	; 139
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	64 c0       	rjmp	.+200    	; 0x25dc <PUCH_BUTTON_2+0x3d0>
	else if (__tmp > 65535)
    2514:	fe 01       	movw	r30, r28
    2516:	e9 58       	subi	r30, 0x89	; 137
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	0c f0       	brlt	.+2      	; 0x2534 <PUCH_BUTTON_2+0x328>
    2532:	43 c0       	rjmp	.+134    	; 0x25ba <PUCH_BUTTON_2+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	fe 01       	movw	r30, r28
    2536:	e5 58       	subi	r30, 0x85	; 133
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8e 01       	movw	r16, r28
    2554:	0b 58       	subi	r16, 0x8B	; 139
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	1f c0       	rjmp	.+62     	; 0x25aa <PUCH_BUTTON_2+0x39e>
    256c:	fe 01       	movw	r30, r28
    256e:	ed 58       	subi	r30, 0x8D	; 141
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	fe 01       	movw	r30, r28
    257c:	ed 58       	subi	r30, 0x8D	; 141
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <PUCH_BUTTON_2+0x378>
    2588:	fe 01       	movw	r30, r28
    258a:	ed 58       	subi	r30, 0x8D	; 141
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	de 01       	movw	r26, r28
    2594:	ab 58       	subi	r26, 0x8B	; 139
    2596:	bf 4f       	sbci	r27, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	eb 58       	subi	r30, 0x8B	; 139
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	11 96       	adiw	r26, 0x01	; 1
    25a6:	9c 93       	st	X, r25
    25a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	fe 01       	movw	r30, r28
    25ac:	eb 58       	subi	r30, 0x8B	; 139
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	d1 f6       	brne	.-76     	; 0x256c <PUCH_BUTTON_2+0x360>
    25b8:	27 c0       	rjmp	.+78     	; 0x2608 <PUCH_BUTTON_2+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	8e 01       	movw	r16, r28
    25bc:	0b 58       	subi	r16, 0x8B	; 139
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e9 58       	subi	r30, 0x89	; 137
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	f8 01       	movw	r30, r16
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	de 01       	movw	r26, r28
    25de:	af 58       	subi	r26, 0x8F	; 143
    25e0:	bf 4f       	sbci	r27, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	eb 58       	subi	r30, 0x8B	; 139
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	8d 93       	st	X+, r24
    25ee:	9c 93       	st	X, r25
    25f0:	fe 01       	movw	r30, r28
    25f2:	ef 58       	subi	r30, 0x8F	; 143
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <PUCH_BUTTON_2+0x3ee>
    25fe:	fe 01       	movw	r30, r28
    2600:	ef 58       	subi	r30, 0x8F	; 143
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
_delay_ms(300);

DIO_SetPinValue(PORTA, pin3 , LOW);
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	64 e0       	ldi	r22, 0x04	; 4
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , HIGH);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	65 e0       	ldi	r22, 0x05	; 5
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2626:	fe 01       	movw	r30, r28
    2628:	e3 59       	subi	r30, 0x93	; 147
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a6 e9       	ldi	r26, 0x96	; 150
    2632:	b3 e4       	ldi	r27, 0x43	; 67
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	a2 83       	std	Z+2, r26	; 0x02
    263a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	8e 01       	movw	r16, r28
    263e:	07 59       	subi	r16, 0x97	; 151
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	e3 59       	subi	r30, 0x93	; 147
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	f8 01       	movw	r30, r16
    2662:	80 83       	st	Z, r24
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	a2 83       	std	Z+2, r26	; 0x02
    2668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266a:	fe 01       	movw	r30, r28
    266c:	e7 59       	subi	r30, 0x97	; 151
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	44 f4       	brge	.+16     	; 0x2698 <PUCH_BUTTON_2+0x48c>
		__ticks = 1;
    2688:	fe 01       	movw	r30, r28
    268a:	e9 59       	subi	r30, 0x99	; 153
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	64 c0       	rjmp	.+200    	; 0x2760 <PUCH_BUTTON_2+0x554>
	else if (__tmp > 65535)
    2698:	fe 01       	movw	r30, r28
    269a:	e7 59       	subi	r30, 0x97	; 151
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	0c f0       	brlt	.+2      	; 0x26b8 <PUCH_BUTTON_2+0x4ac>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <PUCH_BUTTON_2+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	fe 01       	movw	r30, r28
    26ba:	e3 59       	subi	r30, 0x93	; 147
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8e 01       	movw	r16, r28
    26d8:	09 59       	subi	r16, 0x99	; 153
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	f8 01       	movw	r30, r16
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    26ee:	1f c0       	rjmp	.+62     	; 0x272e <PUCH_BUTTON_2+0x522>
    26f0:	fe 01       	movw	r30, r28
    26f2:	eb 59       	subi	r30, 0x9B	; 155
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	eb 59       	subi	r30, 0x9B	; 155
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <PUCH_BUTTON_2+0x4fc>
    270c:	fe 01       	movw	r30, r28
    270e:	eb 59       	subi	r30, 0x9B	; 155
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	de 01       	movw	r26, r28
    2718:	a9 59       	subi	r26, 0x99	; 153
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e9 59       	subi	r30, 0x99	; 153
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	9c 93       	st	X, r25
    272c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	fe 01       	movw	r30, r28
    2730:	e9 59       	subi	r30, 0x99	; 153
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	d1 f6       	brne	.-76     	; 0x26f0 <PUCH_BUTTON_2+0x4e4>
    273c:	92 cd       	rjmp	.-1244   	; 0x2262 <PUCH_BUTTON_2+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	8e 01       	movw	r16, r28
    2740:	09 59       	subi	r16, 0x99	; 153
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	e7 59       	subi	r30, 0x97	; 151
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	f8 01       	movw	r30, r16
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	de 01       	movw	r26, r28
    2762:	ad 59       	subi	r26, 0x9D	; 157
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	e9 59       	subi	r30, 0x99	; 153
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	9c 93       	st	X, r25
    2774:	8e 93       	st	-X, r24
    2776:	fe 01       	movw	r30, r28
    2778:	ed 59       	subi	r30, 0x9D	; 157
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <PUCH_BUTTON_2+0x574>
    2784:	fe 01       	movw	r30, r28
    2786:	ed 59       	subi	r30, 0x9D	; 157
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	69 cd       	rjmp	.-1326   	; 0x2262 <PUCH_BUTTON_2+0x56>
_delay_ms(300);

}

else if (Button0_Value == LOW && Button1_Value == HIGH && Button2_Value == LOW)
    2790:	fe 01       	movw	r30, r28
    2792:	e1 57       	subi	r30, 0x71	; 113
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	88 23       	and	r24, r24
    279a:	09 f0       	breq	.+2      	; 0x279e <PUCH_BUTTON_2+0x592>
    279c:	2b c4       	rjmp	.+2134   	; 0x2ff4 <PUCH_BUTTON_2+0xde8>
    279e:	fe 01       	movw	r30, r28
    27a0:	e2 57       	subi	r30, 0x72	; 114
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	09 f0       	breq	.+2      	; 0x27ac <PUCH_BUTTON_2+0x5a0>
    27aa:	24 c4       	rjmp	.+2120   	; 0x2ff4 <PUCH_BUTTON_2+0xde8>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e3 57       	subi	r30, 0x73	; 115
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	09 f0       	breq	.+2      	; 0x27ba <PUCH_BUTTON_2+0x5ae>
    27b8:	1d c4       	rjmp	.+2106   	; 0x2ff4 <PUCH_BUTTON_2+0xde8>
{
DIO_SetPinValue(PORTA, pin3 , LOW);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	64 e0       	ldi	r22, 0x04	; 4
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , LOW);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	65 e0       	ldi	r22, 0x05	; 5
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    27d8:	fe 01       	movw	r30, r28
    27da:	e1 5a       	subi	r30, 0xA1	; 161
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a6 e9       	ldi	r26, 0x96	; 150
    27e4:	b3 e4       	ldi	r27, 0x43	; 67
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	8e 01       	movw	r16, r28
    27f0:	05 5a       	subi	r16, 0xA5	; 165
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e1 5a       	subi	r30, 0xA1	; 161
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a ef       	ldi	r20, 0xFA	; 250
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281c:	fe 01       	movw	r30, r28
    281e:	e5 5a       	subi	r30, 0xA5	; 165
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	44 f4       	brge	.+16     	; 0x284a <PUCH_BUTTON_2+0x63e>
		__ticks = 1;
    283a:	fe 01       	movw	r30, r28
    283c:	e7 5a       	subi	r30, 0xA7	; 167
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	64 c0       	rjmp	.+200    	; 0x2912 <PUCH_BUTTON_2+0x706>
	else if (__tmp > 65535)
    284a:	fe 01       	movw	r30, r28
    284c:	e5 5a       	subi	r30, 0xA5	; 165
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <PUCH_BUTTON_2+0x65e>
    2868:	43 c0       	rjmp	.+134    	; 0x28f0 <PUCH_BUTTON_2+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	e1 5a       	subi	r30, 0xA1	; 161
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8e 01       	movw	r16, r28
    288a:	07 5a       	subi	r16, 0xA7	; 167
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	1f c0       	rjmp	.+62     	; 0x28e0 <PUCH_BUTTON_2+0x6d4>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e9 5a       	subi	r30, 0xA9	; 169
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	e9 5a       	subi	r30, 0xA9	; 169
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <PUCH_BUTTON_2+0x6ae>
    28be:	fe 01       	movw	r30, r28
    28c0:	e9 5a       	subi	r30, 0xA9	; 169
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	de 01       	movw	r26, r28
    28ca:	a7 5a       	subi	r26, 0xA7	; 167
    28cc:	bf 4f       	sbci	r27, 0xFF	; 255
    28ce:	fe 01       	movw	r30, r28
    28d0:	e7 5a       	subi	r30, 0xA7	; 167
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	9c 93       	st	X, r25
    28de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e7 5a       	subi	r30, 0xA7	; 167
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	d1 f6       	brne	.-76     	; 0x28a2 <PUCH_BUTTON_2+0x696>
    28ee:	27 c0       	rjmp	.+78     	; 0x293e <PUCH_BUTTON_2+0x732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	8e 01       	movw	r16, r28
    28f2:	07 5a       	subi	r16, 0xA7	; 167
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	e5 5a       	subi	r30, 0xA5	; 165
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	de 01       	movw	r26, r28
    2914:	ab 5a       	subi	r26, 0xAB	; 171
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e7 5a       	subi	r30, 0xA7	; 167
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	8d 93       	st	X+, r24
    2924:	9c 93       	st	X, r25
    2926:	fe 01       	movw	r30, r28
    2928:	eb 5a       	subi	r30, 0xAB	; 171
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <PUCH_BUTTON_2+0x724>
    2934:	fe 01       	movw	r30, r28
    2936:	eb 5a       	subi	r30, 0xAB	; 171
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
_delay_ms(300);                          // 000

DIO_SetPinValue(PORTA, pin3 , HIGH);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	63 e0       	ldi	r22, 0x03	; 3
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , LOW);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	65 e0       	ldi	r22, 0x05	; 5
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    295c:	fe 01       	movw	r30, r28
    295e:	ef 5a       	subi	r30, 0xAF	; 175
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a6 e9       	ldi	r26, 0x96	; 150
    2968:	b3 e4       	ldi	r27, 0x43	; 67
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	8e 01       	movw	r16, r28
    2974:	03 5b       	subi	r16, 0xB3	; 179
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	ef 5a       	subi	r30, 0xAF	; 175
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a ef       	ldi	r20, 0xFA	; 250
    298c:	54 e4       	ldi	r21, 0x44	; 68
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	f8 01       	movw	r30, r16
    2998:	80 83       	st	Z, r24
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a0:	fe 01       	movw	r30, r28
    29a2:	e3 5b       	subi	r30, 0xB3	; 179
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e8       	ldi	r20, 0x80	; 128
    29b4:	5f e3       	ldi	r21, 0x3F	; 63
    29b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	44 f4       	brge	.+16     	; 0x29ce <PUCH_BUTTON_2+0x7c2>
		__ticks = 1;
    29be:	fe 01       	movw	r30, r28
    29c0:	e5 5b       	subi	r30, 0xB5	; 181
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	64 c0       	rjmp	.+200    	; 0x2a96 <PUCH_BUTTON_2+0x88a>
	else if (__tmp > 65535)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e3 5b       	subi	r30, 0xB3	; 179
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	3f ef       	ldi	r19, 0xFF	; 255
    29e0:	4f e7       	ldi	r20, 0x7F	; 127
    29e2:	57 e4       	ldi	r21, 0x47	; 71
    29e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	0c f0       	brlt	.+2      	; 0x29ee <PUCH_BUTTON_2+0x7e2>
    29ec:	43 c0       	rjmp	.+134    	; 0x2a74 <PUCH_BUTTON_2+0x868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 5a       	subi	r30, 0xAF	; 175
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	05 5b       	subi	r16, 0xB5	; 181
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	f8 01       	movw	r30, r16
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
    2a24:	1f c0       	rjmp	.+62     	; 0x2a64 <PUCH_BUTTON_2+0x858>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5b       	subi	r30, 0xB7	; 183
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	88 ec       	ldi	r24, 0xC8	; 200
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	fe 01       	movw	r30, r28
    2a36:	e7 5b       	subi	r30, 0xB7	; 183
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <PUCH_BUTTON_2+0x832>
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 5b       	subi	r30, 0xB7	; 183
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	de 01       	movw	r26, r28
    2a4e:	a5 5b       	subi	r26, 0xB5	; 181
    2a50:	bf 4f       	sbci	r27, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 5b       	subi	r30, 0xB5	; 181
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	11 96       	adiw	r26, 0x01	; 1
    2a60:	9c 93       	st	X, r25
    2a62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	fe 01       	movw	r30, r28
    2a66:	e5 5b       	subi	r30, 0xB5	; 181
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	d1 f6       	brne	.-76     	; 0x2a26 <PUCH_BUTTON_2+0x81a>
    2a72:	27 c0       	rjmp	.+78     	; 0x2ac2 <PUCH_BUTTON_2+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	8e 01       	movw	r16, r28
    2a76:	05 5b       	subi	r16, 0xB5	; 181
    2a78:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e3 5b       	subi	r30, 0xB3	; 179
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	f8 01       	movw	r30, r16
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
    2a96:	de 01       	movw	r26, r28
    2a98:	a9 5b       	subi	r26, 0xB9	; 185
    2a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e5 5b       	subi	r30, 0xB5	; 181
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	8d 93       	st	X+, r24
    2aa8:	9c 93       	st	X, r25
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e9 5b       	subi	r30, 0xB9	; 185
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <PUCH_BUTTON_2+0x8a8>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e9 5b       	subi	r30, 0xB9	; 185
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
_delay_ms(300);                          // 010

DIO_SetPinValue(PORTA, pin3 , HIGH);
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	63 e0       	ldi	r22, 0x03	; 3
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , HIGH);
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	64 e0       	ldi	r22, 0x04	; 4
    2ad0:	41 e0       	ldi	r20, 0x01	; 1
    2ad2:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , LOW);
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	65 e0       	ldi	r22, 0x05	; 5
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ed 5b       	subi	r30, 0xBD	; 189
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a6 e9       	ldi	r26, 0x96	; 150
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	80 83       	st	Z, r24
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	a2 83       	std	Z+2, r26	; 0x02
    2af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	8e 01       	movw	r16, r28
    2af8:	01 5c       	subi	r16, 0xC1	; 193
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	fe 01       	movw	r30, r28
    2afe:	ed 5b       	subi	r30, 0xBD	; 189
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a ef       	ldi	r20, 0xFA	; 250
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	80 83       	st	Z, r24
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	a2 83       	std	Z+2, r26	; 0x02
    2b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b24:	fe 01       	movw	r30, r28
    2b26:	ff 96       	adiw	r30, 0x3f	; 63
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <PUCH_BUTTON_2+0x93e>
		__ticks = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9e af       	std	Y+62, r25	; 0x3e
    2b46:	8d af       	std	Y+61, r24	; 0x3d
    2b48:	46 c0       	rjmp	.+140    	; 0x2bd6 <PUCH_BUTTON_2+0x9ca>
	else if (__tmp > 65535)
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ff 96       	adiw	r30, 0x3f	; 63
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	64 f5       	brge	.+88     	; 0x2bbe <PUCH_BUTTON_2+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 5b       	subi	r30, 0xBD	; 189
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e af       	std	Y+62, r25	; 0x3e
    2b92:	8d af       	std	Y+61, r24	; 0x3d
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <PUCH_BUTTON_2+0x9a8>
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c af       	std	Y+60, r25	; 0x3c
    2b9c:	8b af       	std	Y+59, r24	; 0x3b
    2b9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ba0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <PUCH_BUTTON_2+0x996>
    2ba6:	9c af       	std	Y+60, r25	; 0x3c
    2ba8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9e af       	std	Y+62, r25	; 0x3e
    2bb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <PUCH_BUTTON_2+0x98a>
    2bbc:	16 c0       	rjmp	.+44     	; 0x2bea <PUCH_BUTTON_2+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	ff 96       	adiw	r30, 0x3f	; 63
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e af       	std	Y+62, r25	; 0x3e
    2bd4:	8d af       	std	Y+61, r24	; 0x3d
    2bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bda:	9a af       	std	Y+58, r25	; 0x3a
    2bdc:	89 af       	std	Y+57, r24	; 0x39
    2bde:	89 ad       	ldd	r24, Y+57	; 0x39
    2be0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <PUCH_BUTTON_2+0x9d6>
    2be6:	9a af       	std	Y+58, r25	; 0x3a
    2be8:	89 af       	std	Y+57, r24	; 0x39
_delay_ms(300);                          // 011

DIO_SetPinValue(PORTA, pin3 , LOW);
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	63 e0       	ldi	r22, 0x03	; 3
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	64 e0       	ldi	r22, 0x04	; 4
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , HIGH);
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	65 e0       	ldi	r22, 0x05	; 5
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a6 e9       	ldi	r26, 0x96	; 150
    2c0e:	b3 e4       	ldi	r27, 0x43	; 67
    2c10:	8d ab       	std	Y+53, r24	; 0x35
    2c12:	9e ab       	std	Y+54, r25	; 0x36
    2c14:	af ab       	std	Y+55, r26	; 0x37
    2c16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	6d a9       	ldd	r22, Y+53	; 0x35
    2c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a ef       	ldi	r20, 0xFA	; 250
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	89 ab       	std	Y+49, r24	; 0x31
    2c32:	9a ab       	std	Y+50, r25	; 0x32
    2c34:	ab ab       	std	Y+51, r26	; 0x33
    2c36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c38:	69 a9       	ldd	r22, Y+49	; 0x31
    2c3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <PUCH_BUTTON_2+0xa4e>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	98 ab       	std	Y+48, r25	; 0x30
    2c56:	8f a7       	std	Y+47, r24	; 0x2f
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <PUCH_BUTTON_2+0xacc>
	else if (__tmp > 65535)
    2c5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c60:	9c a9       	ldd	r25, Y+52	; 0x34
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	4c f5       	brge	.+82     	; 0x2cc4 <PUCH_BUTTON_2+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	6d a9       	ldd	r22, Y+53	; 0x35
    2c74:	7e a9       	ldd	r23, Y+54	; 0x36
    2c76:	8f a9       	ldd	r24, Y+55	; 0x37
    2c78:	98 ad       	ldd	r25, Y+56	; 0x38
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e2       	ldi	r20, 0x20	; 32
    2c80:	51 e4       	ldi	r21, 0x41	; 65
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	98 ab       	std	Y+48, r25	; 0x30
    2c98:	8f a7       	std	Y+47, r24	; 0x2f
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <PUCH_BUTTON_2+0xaae>
    2c9c:	88 ec       	ldi	r24, 0xC8	; 200
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9e a7       	std	Y+46, r25	; 0x2e
    2ca2:	8d a7       	std	Y+45, r24	; 0x2d
    2ca4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ca6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <PUCH_BUTTON_2+0xa9c>
    2cac:	9e a7       	std	Y+46, r25	; 0x2e
    2cae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	98 ab       	std	Y+48, r25	; 0x30
    2cb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <PUCH_BUTTON_2+0xa90>
    2cc2:	14 c0       	rjmp	.+40     	; 0x2cec <PUCH_BUTTON_2+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cca:	9c a9       	ldd	r25, Y+52	; 0x34
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	98 ab       	std	Y+48, r25	; 0x30
    2cd6:	8f a7       	std	Y+47, r24	; 0x2f
    2cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cda:	98 a9       	ldd	r25, Y+48	; 0x30
    2cdc:	9c a7       	std	Y+44, r25	; 0x2c
    2cde:	8b a7       	std	Y+43, r24	; 0x2b
    2ce0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ce2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <PUCH_BUTTON_2+0xad8>
    2ce8:	9c a7       	std	Y+44, r25	; 0x2c
    2cea:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(300);                          // 100

DIO_SetPinValue(PORTA, pin3 , HIGH);
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	63 e0       	ldi	r22, 0x03	; 3
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , LOW);
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	64 e0       	ldi	r22, 0x04	; 4
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , HIGH);
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	65 e0       	ldi	r22, 0x05	; 5
    2d04:	41 e0       	ldi	r20, 0x01	; 1
    2d06:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a6 e9       	ldi	r26, 0x96	; 150
    2d10:	b3 e4       	ldi	r27, 0x43	; 67
    2d12:	8f a3       	std	Y+39, r24	; 0x27
    2d14:	98 a7       	std	Y+40, r25	; 0x28
    2d16:	a9 a7       	std	Y+41, r26	; 0x29
    2d18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8b a3       	std	Y+35, r24	; 0x23
    2d34:	9c a3       	std	Y+36, r25	; 0x24
    2d36:	ad a3       	std	Y+37, r26	; 0x25
    2d38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d40:	9e a1       	ldd	r25, Y+38	; 0x26
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <PUCH_BUTTON_2+0xb50>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9a a3       	std	Y+34, r25	; 0x22
    2d58:	89 a3       	std	Y+33, r24	; 0x21
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <PUCH_BUTTON_2+0xbce>
	else if (__tmp > 65535)
    2d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d60:	8d a1       	ldd	r24, Y+37	; 0x25
    2d62:	9e a1       	ldd	r25, Y+38	; 0x26
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <PUCH_BUTTON_2+0xbba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	6f a1       	ldd	r22, Y+39	; 0x27
    2d76:	78 a5       	ldd	r23, Y+40	; 0x28
    2d78:	89 a5       	ldd	r24, Y+41	; 0x29
    2d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9a a3       	std	Y+34, r25	; 0x22
    2d9a:	89 a3       	std	Y+33, r24	; 0x21
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <PUCH_BUTTON_2+0xbb0>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	98 a3       	std	Y+32, r25	; 0x20
    2da4:	8f 8f       	std	Y+31, r24	; 0x1f
    2da6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2da8:	98 a1       	ldd	r25, Y+32	; 0x20
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <PUCH_BUTTON_2+0xb9e>
    2dae:	98 a3       	std	Y+32, r25	; 0x20
    2db0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	89 a1       	ldd	r24, Y+33	; 0x21
    2db4:	9a a1       	ldd	r25, Y+34	; 0x22
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9a a3       	std	Y+34, r25	; 0x22
    2dba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <PUCH_BUTTON_2+0xb92>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <PUCH_BUTTON_2+0xbe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dca:	8d a1       	ldd	r24, Y+37	; 0x25
    2dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9a a3       	std	Y+34, r25	; 0x22
    2dd8:	89 a3       	std	Y+33, r24	; 0x21
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	9e 8f       	std	Y+30, r25	; 0x1e
    2de0:	8d 8f       	std	Y+29, r24	; 0x1d
    2de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <PUCH_BUTTON_2+0xbda>
    2dea:	9e 8f       	std	Y+30, r25	; 0x1e
    2dec:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(300);                          // 101

DIO_SetPinValue(PORTA, pin3 , LOW);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	63 e0       	ldi	r22, 0x03	; 3
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , HIGH);
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	64 e0       	ldi	r22, 0x04	; 4
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , HIGH);
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	65 e0       	ldi	r22, 0x05	; 5
    2e06:	41 e0       	ldi	r20, 0x01	; 1
    2e08:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a6 e9       	ldi	r26, 0x96	; 150
    2e12:	b3 e4       	ldi	r27, 0x43	; 67
    2e14:	89 8f       	std	Y+25, r24	; 0x19
    2e16:	9a 8f       	std	Y+26, r25	; 0x1a
    2e18:	ab 8f       	std	Y+27, r26	; 0x1b
    2e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a ef       	ldi	r20, 0xFA	; 250
    2e2a:	54 e4       	ldi	r21, 0x44	; 68
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8d 8b       	std	Y+21, r24	; 0x15
    2e36:	9e 8b       	std	Y+22, r25	; 0x16
    2e38:	af 8b       	std	Y+23, r26	; 0x17
    2e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e40:	8f 89       	ldd	r24, Y+23	; 0x17
    2e42:	98 8d       	ldd	r25, Y+24	; 0x18
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <PUCH_BUTTON_2+0xc52>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <PUCH_BUTTON_2+0xcd0>
	else if (__tmp > 65535)
    2e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e60:	7e 89       	ldd	r23, Y+22	; 0x16
    2e62:	8f 89       	ldd	r24, Y+23	; 0x17
    2e64:	98 8d       	ldd	r25, Y+24	; 0x18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <PUCH_BUTTON_2+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	69 8d       	ldd	r22, Y+25	; 0x19
    2e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <PUCH_BUTTON_2+0xcb2>
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9a 8b       	std	Y+18, r25	; 0x12
    2ea6:	89 8b       	std	Y+17, r24	; 0x11
    2ea8:	89 89       	ldd	r24, Y+17	; 0x11
    2eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <PUCH_BUTTON_2+0xca0>
    2eb0:	9a 8b       	std	Y+18, r25	; 0x12
    2eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <PUCH_BUTTON_2+0xc94>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <PUCH_BUTTON_2+0xce4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eca:	7e 89       	ldd	r23, Y+22	; 0x16
    2ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ece:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee0:	98 8b       	std	Y+16, r25	; 0x10
    2ee2:	8f 87       	std	Y+15, r24	; 0x0f
    2ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee6:	98 89       	ldd	r25, Y+16	; 0x10
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <PUCH_BUTTON_2+0xcdc>
    2eec:	98 8b       	std	Y+16, r25	; 0x10
    2eee:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(300);                          // 110

DIO_SetPinValue(PORTA, pin3 , HIGH);
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	63 e0       	ldi	r22, 0x03	; 3
    2ef4:	41 e0       	ldi	r20, 0x01	; 1
    2ef6:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin4 , HIGH);
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	64 e0       	ldi	r22, 0x04	; 4
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
DIO_SetPinValue(PORTA, pin5 , HIGH);
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	65 e0       	ldi	r22, 0x05	; 5
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a6 e9       	ldi	r26, 0x96	; 150
    2f14:	b3 e4       	ldi	r27, 0x43	; 67
    2f16:	8b 87       	std	Y+11, r24	; 0x0b
    2f18:	9c 87       	std	Y+12, r25	; 0x0c
    2f1a:	ad 87       	std	Y+13, r26	; 0x0d
    2f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a ef       	ldi	r20, 0xFA	; 250
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8f 83       	std	Y+7, r24	; 0x07
    2f38:	98 87       	std	Y+8, r25	; 0x08
    2f3a:	a9 87       	std	Y+9, r26	; 0x09
    2f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <PUCH_BUTTON_2+0xd54>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <PUCH_BUTTON_2+0xdd2>
	else if (__tmp > 65535)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <PUCH_BUTTON_2+0xdbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <PUCH_BUTTON_2+0xdb4>
    2fa2:	88 ec       	ldi	r24, 0xC8	; 200
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <PUCH_BUTTON_2+0xda2>
    2fb2:	9c 83       	std	Y+4, r25	; 0x04
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <PUCH_BUTTON_2+0xd96>
    2fc8:	4c c9       	rjmp	.-3432   	; 0x2262 <PUCH_BUTTON_2+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <PUCH_BUTTON_2+0xdde>
    2fee:	9a 83       	std	Y+2, r25	; 0x02
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	37 c9       	rjmp	.-3474   	; 0x2262 <PUCH_BUTTON_2+0x56>
_delay_ms(300);                          // 111

}
else
{
	DIO_SetPinValue(PORTA, pin3 , LOW);
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	63 e0       	ldi	r22, 0x03	; 3
    2ff8:	40 e0       	ldi	r20, 0x00	; 0
    2ffa:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA, pin4 , LOW);
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	64 e0       	ldi	r22, 0x04	; 4
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA, pin5 , LOW);
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	65 e0       	ldi	r22, 0x05	; 5
    300c:	40 e0       	ldi	r20, 0x00	; 0
    300e:	0e 94 69 07 	call	0xed2	; 0xed2 <DIO_SetPinValue>
    3012:	27 c9       	rjmp	.-3506   	; 0x2262 <PUCH_BUTTON_2+0x56>

00003014 <SEV_SEG>:
 *      Author: Pro
 */
#include <avr/delay.h>
#include "../LIB/STD_types.h"
void SEV_SEG(u8 number , float time_sec)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	a7 97       	sbiw	r28, 0x27	; 39
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	8b a3       	std	Y+35, r24	; 0x23
    302a:	4c a3       	std	Y+36, r20	; 0x24
    302c:	5d a3       	std	Y+37, r21	; 0x25
    302e:	6e a3       	std	Y+38, r22	; 0x26
    3030:	7f a3       	std	Y+39, r23	; 0x27
 Seven_Segment_Initialization();
    3032:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <Seven_Segment_Initialization>

 	 u16 time_ms = time_sec*1000;
    3036:	6c a1       	ldd	r22, Y+36	; 0x24
    3038:	7d a1       	ldd	r23, Y+37	; 0x25
    303a:	8e a1       	ldd	r24, Y+38	; 0x26
    303c:	9f a1       	ldd	r25, Y+39	; 0x27
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	54 e4       	ldi	r21, 0x44	; 68
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	bc 01       	movw	r22, r24
    3050:	cd 01       	movw	r24, r26
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9a a3       	std	Y+34, r25	; 0x22
    305c:	89 a3       	std	Y+33, r24	; 0x21


			if(number < 100)
    305e:	8b a1       	ldd	r24, Y+35	; 0x23
    3060:	84 36       	cpi	r24, 0x64	; 100
    3062:	08 f0       	brcs	.+2      	; 0x3066 <SEV_SEG+0x52>
    3064:	1c c1       	rjmp	.+568    	; 0x329e <SEV_SEG+0x28a>
				{ //9 9  4 8
				u8 right = number % 10 ; //en2
    3066:	8b a1       	ldd	r24, Y+35	; 0x23
    3068:	9a e0       	ldi	r25, 0x0A	; 10
    306a:	69 2f       	mov	r22, r25
    306c:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodqi4>
    3070:	89 2f       	mov	r24, r25
    3072:	88 a3       	std	Y+32, r24	; 0x20
				u8 lift = number / 10 ; //en1
    3074:	8b a1       	ldd	r24, Y+35	; 0x23
    3076:	9a e0       	ldi	r25, 0x0A	; 10
    3078:	69 2f       	mov	r22, r25
    307a:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodqi4>
    307e:	8f 8f       	std	Y+31, r24	; 0x1f

				for(u16 i=0 ; i< time_ms/20
    3080:	1e 8e       	std	Y+30, r1	; 0x1e
    3082:	1d 8e       	std	Y+29, r1	; 0x1d
    3084:	fd c0       	rjmp	.+506    	; 0x3280 <SEV_SEG+0x26c>
				; i++)
				{
					Seven_Segment_Disable2();
    3086:	0e 94 3b 09 	call	0x1276	; 0x1276 <Seven_Segment_Disable2>
					Seven_Segment_Disable1();
    308a:	0e 94 2f 09 	call	0x125e	; 0x125e <Seven_Segment_Disable1>

					Seven_Segment_Write_Number(lift);
    308e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3090:	88 2f       	mov	r24, r24
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 47 09 	call	0x128e	; 0x128e <Seven_Segment_Write_Number>
					Seven_Segment_Enable1();
    3098:	0e 94 17 09 	call	0x122e	; 0x122e <Seven_Segment_Enable1>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a0 e2       	ldi	r26, 0x20	; 32
    30a2:	b1 e4       	ldi	r27, 0x41	; 65
    30a4:	89 8f       	std	Y+25, r24	; 0x19
    30a6:	9a 8f       	std	Y+26, r25	; 0x1a
    30a8:	ab 8f       	std	Y+27, r26	; 0x1b
    30aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ac:	69 8d       	ldd	r22, Y+25	; 0x19
    30ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4a ef       	ldi	r20, 0xFA	; 250
    30ba:	54 e4       	ldi	r21, 0x44	; 68
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8d 8b       	std	Y+21, r24	; 0x15
    30c6:	9e 8b       	std	Y+22, r25	; 0x16
    30c8:	af 8b       	std	Y+23, r26	; 0x17
    30ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30cc:	6d 89       	ldd	r22, Y+21	; 0x15
    30ce:	7e 89       	ldd	r23, Y+22	; 0x16
    30d0:	8f 89       	ldd	r24, Y+23	; 0x17
    30d2:	98 8d       	ldd	r25, Y+24	; 0x18
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	2c f4       	brge	.+10     	; 0x30ee <SEV_SEG+0xda>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9c 8b       	std	Y+20, r25	; 0x14
    30ea:	8b 8b       	std	Y+19, r24	; 0x13
    30ec:	3f c0       	rjmp	.+126    	; 0x316c <SEV_SEG+0x158>
	else if (__tmp > 65535)
    30ee:	6d 89       	ldd	r22, Y+21	; 0x15
    30f0:	7e 89       	ldd	r23, Y+22	; 0x16
    30f2:	8f 89       	ldd	r24, Y+23	; 0x17
    30f4:	98 8d       	ldd	r25, Y+24	; 0x18
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	4f e7       	ldi	r20, 0x7F	; 127
    30fc:	57 e4       	ldi	r21, 0x47	; 71
    30fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3102:	18 16       	cp	r1, r24
    3104:	4c f5       	brge	.+82     	; 0x3158 <SEV_SEG+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3106:	69 8d       	ldd	r22, Y+25	; 0x19
    3108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    310a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e2       	ldi	r20, 0x20	; 32
    3114:	51 e4       	ldi	r21, 0x41	; 65
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9c 8b       	std	Y+20, r25	; 0x14
    312c:	8b 8b       	std	Y+19, r24	; 0x13
    312e:	0f c0       	rjmp	.+30     	; 0x314e <SEV_SEG+0x13a>
    3130:	88 ec       	ldi	r24, 0xC8	; 200
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9a 8b       	std	Y+18, r25	; 0x12
    3136:	89 8b       	std	Y+17, r24	; 0x11
    3138:	89 89       	ldd	r24, Y+17	; 0x11
    313a:	9a 89       	ldd	r25, Y+18	; 0x12
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <SEV_SEG+0x128>
    3140:	9a 8b       	std	Y+18, r25	; 0x12
    3142:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	8b 89       	ldd	r24, Y+19	; 0x13
    3146:	9c 89       	ldd	r25, Y+20	; 0x14
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	8b 89       	ldd	r24, Y+19	; 0x13
    3150:	9c 89       	ldd	r25, Y+20	; 0x14
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	69 f7       	brne	.-38     	; 0x3130 <SEV_SEG+0x11c>
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <SEV_SEG+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3158:	6d 89       	ldd	r22, Y+21	; 0x15
    315a:	7e 89       	ldd	r23, Y+22	; 0x16
    315c:	8f 89       	ldd	r24, Y+23	; 0x17
    315e:	98 8d       	ldd	r25, Y+24	; 0x18
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9c 8b       	std	Y+20, r25	; 0x14
    316a:	8b 8b       	std	Y+19, r24	; 0x13
    316c:	8b 89       	ldd	r24, Y+19	; 0x13
    316e:	9c 89       	ldd	r25, Y+20	; 0x14
    3170:	98 8b       	std	Y+16, r25	; 0x10
    3172:	8f 87       	std	Y+15, r24	; 0x0f
    3174:	8f 85       	ldd	r24, Y+15	; 0x0f
    3176:	98 89       	ldd	r25, Y+16	; 0x10
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <SEV_SEG+0x164>
    317c:	98 8b       	std	Y+16, r25	; 0x10
    317e:	8f 87       	std	Y+15, r24	; 0x0f
					   _delay_ms(10);
					Seven_Segment_Disable1();
    3180:	0e 94 2f 09 	call	0x125e	; 0x125e <Seven_Segment_Disable1>

					Seven_Segment_Write_Number(right);
    3184:	88 a1       	ldd	r24, Y+32	; 0x20
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 47 09 	call	0x128e	; 0x128e <Seven_Segment_Write_Number>
					Seven_Segment_Enable2();
    318e:	0e 94 23 09 	call	0x1246	; 0x1246 <Seven_Segment_Enable2>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	a0 e2       	ldi	r26, 0x20	; 32
    3198:	b1 e4       	ldi	r27, 0x41	; 65
    319a:	8b 87       	std	Y+11, r24	; 0x0b
    319c:	9c 87       	std	Y+12, r25	; 0x0c
    319e:	ad 87       	std	Y+13, r26	; 0x0d
    31a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8f 83       	std	Y+7, r24	; 0x07
    31bc:	98 87       	std	Y+8, r25	; 0x08
    31be:	a9 87       	std	Y+9, r26	; 0x09
    31c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31c2:	6f 81       	ldd	r22, Y+7	; 0x07
    31c4:	78 85       	ldd	r23, Y+8	; 0x08
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <SEV_SEG+0x1d0>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9e 83       	std	Y+6, r25	; 0x06
    31e0:	8d 83       	std	Y+5, r24	; 0x05
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <SEV_SEG+0x24e>
	else if (__tmp > 65535)
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <SEV_SEG+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <SEV_SEG+0x230>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <SEV_SEG+0x21e>
    3236:	9c 83       	std	Y+4, r25	; 0x04
    3238:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9e 83       	std	Y+6, r25	; 0x06
    3242:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <SEV_SEG+0x212>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <SEV_SEG+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6f 81       	ldd	r22, Y+7	; 0x07
    3250:	78 85       	ldd	r23, Y+8	; 0x08
    3252:	89 85       	ldd	r24, Y+9	; 0x09
    3254:	9a 85       	ldd	r25, Y+10	; 0x0a
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9e 83       	std	Y+6, r25	; 0x06
    3260:	8d 83       	std	Y+5, r24	; 0x05
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <SEV_SEG+0x25a>
    3272:	9a 83       	std	Y+2, r25	; 0x02
    3274:	89 83       	std	Y+1, r24	; 0x01
				{ //9 9  4 8
				u8 right = number % 10 ; //en2
				u8 lift = number / 10 ; //en1

				for(u16 i=0 ; i< time_ms/20
				; i++)
    3276:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3278:	9e 8d       	ldd	r25, Y+30	; 0x1e
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	9e 8f       	std	Y+30, r25	; 0x1e
    327e:	8d 8f       	std	Y+29, r24	; 0x1d
			if(number < 100)
				{ //9 9  4 8
				u8 right = number % 10 ; //en2
				u8 lift = number / 10 ; //en1

				for(u16 i=0 ; i< time_ms/20
    3280:	89 a1       	ldd	r24, Y+33	; 0x21
    3282:	9a a1       	ldd	r25, Y+34	; 0x22
    3284:	24 e1       	ldi	r18, 0x14	; 20
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	b9 01       	movw	r22, r18
    328a:	0e 94 6d 19 	call	0x32da	; 0x32da <__udivmodhi4>
    328e:	cb 01       	movw	r24, r22
    3290:	9c 01       	movw	r18, r24
    3292:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3294:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3296:	82 17       	cp	r24, r18
    3298:	93 07       	cpc	r25, r19
    329a:	08 f4       	brcc	.+2      	; 0x329e <SEV_SEG+0x28a>
    329c:	f4 ce       	rjmp	.-536    	; 0x3086 <SEV_SEG+0x72>
					Seven_Segment_Enable2();
					   _delay_ms(10);
				}
				}

}
    329e:	a7 96       	adiw	r28, 0x27	; 39
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <main>:
 *  Created on: Aug 31, 2023
 *      Author: Pro
 */

void main ()
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
			SEV_SEG(i , .5);
		}
	}
*/

	LCD_1();
    32b8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_1>

}
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <__udivmodqi4>:
    32c2:	99 1b       	sub	r25, r25
    32c4:	79 e0       	ldi	r23, 0x09	; 9
    32c6:	04 c0       	rjmp	.+8      	; 0x32d0 <__udivmodqi4_ep>

000032c8 <__udivmodqi4_loop>:
    32c8:	99 1f       	adc	r25, r25
    32ca:	96 17       	cp	r25, r22
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <__udivmodqi4_ep>
    32ce:	96 1b       	sub	r25, r22

000032d0 <__udivmodqi4_ep>:
    32d0:	88 1f       	adc	r24, r24
    32d2:	7a 95       	dec	r23
    32d4:	c9 f7       	brne	.-14     	; 0x32c8 <__udivmodqi4_loop>
    32d6:	80 95       	com	r24
    32d8:	08 95       	ret

000032da <__udivmodhi4>:
    32da:	aa 1b       	sub	r26, r26
    32dc:	bb 1b       	sub	r27, r27
    32de:	51 e1       	ldi	r21, 0x11	; 17
    32e0:	07 c0       	rjmp	.+14     	; 0x32f0 <__udivmodhi4_ep>

000032e2 <__udivmodhi4_loop>:
    32e2:	aa 1f       	adc	r26, r26
    32e4:	bb 1f       	adc	r27, r27
    32e6:	a6 17       	cp	r26, r22
    32e8:	b7 07       	cpc	r27, r23
    32ea:	10 f0       	brcs	.+4      	; 0x32f0 <__udivmodhi4_ep>
    32ec:	a6 1b       	sub	r26, r22
    32ee:	b7 0b       	sbc	r27, r23

000032f0 <__udivmodhi4_ep>:
    32f0:	88 1f       	adc	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	5a 95       	dec	r21
    32f6:	a9 f7       	brne	.-22     	; 0x32e2 <__udivmodhi4_loop>
    32f8:	80 95       	com	r24
    32fa:	90 95       	com	r25
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	08 95       	ret

00003302 <__prologue_saves__>:
    3302:	2f 92       	push	r2
    3304:	3f 92       	push	r3
    3306:	4f 92       	push	r4
    3308:	5f 92       	push	r5
    330a:	6f 92       	push	r6
    330c:	7f 92       	push	r7
    330e:	8f 92       	push	r8
    3310:	9f 92       	push	r9
    3312:	af 92       	push	r10
    3314:	bf 92       	push	r11
    3316:	cf 92       	push	r12
    3318:	df 92       	push	r13
    331a:	ef 92       	push	r14
    331c:	ff 92       	push	r15
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	ca 1b       	sub	r28, r26
    332c:	db 0b       	sbc	r29, r27
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	09 94       	ijmp

0000333a <__epilogue_restores__>:
    333a:	2a 88       	ldd	r2, Y+18	; 0x12
    333c:	39 88       	ldd	r3, Y+17	; 0x11
    333e:	48 88       	ldd	r4, Y+16	; 0x10
    3340:	5f 84       	ldd	r5, Y+15	; 0x0f
    3342:	6e 84       	ldd	r6, Y+14	; 0x0e
    3344:	7d 84       	ldd	r7, Y+13	; 0x0d
    3346:	8c 84       	ldd	r8, Y+12	; 0x0c
    3348:	9b 84       	ldd	r9, Y+11	; 0x0b
    334a:	aa 84       	ldd	r10, Y+10	; 0x0a
    334c:	b9 84       	ldd	r11, Y+9	; 0x09
    334e:	c8 84       	ldd	r12, Y+8	; 0x08
    3350:	df 80       	ldd	r13, Y+7	; 0x07
    3352:	ee 80       	ldd	r14, Y+6	; 0x06
    3354:	fd 80       	ldd	r15, Y+5	; 0x05
    3356:	0c 81       	ldd	r16, Y+4	; 0x04
    3358:	1b 81       	ldd	r17, Y+3	; 0x03
    335a:	aa 81       	ldd	r26, Y+2	; 0x02
    335c:	b9 81       	ldd	r27, Y+1	; 0x01
    335e:	ce 0f       	add	r28, r30
    3360:	d1 1d       	adc	r29, r1
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	ed 01       	movw	r28, r26
    336e:	08 95       	ret

00003370 <_exit>:
    3370:	f8 94       	cli

00003372 <__stop_program>:
    3372:	ff cf       	rjmp	.-2      	; 0x3372 <__stop_program>
